# Description: this workflow publishes UI packages to `latest` tag on NPM.
#
# Triggered by: whenever "Version Packages" is merged

# If successful, we will publish all updated UI packages to
#   - https://www.npmjs.com/package/@aws-amplify/ui
#   - https://www.npmjs.com/package/@aws-amplify/ui-react
#   - https://www.npmjs.com/package/@aws-amplify/ui-vue
#   - https://www.npmjs.com/package/@aws-amplify/ui-angular

name: Test and Publish / latest

on:
  push:
    branches: [main]

permissions:
  contents: write # Used to push tags to GitHub

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      has-changesets: ${{ steps.has-changesets.outputs.has-changesets }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - name: Check if repo has unconsumed changesets
        id: has-changesets
        uses: ./.github/actions/has-changesets
      # Note: if there are no changesets, that means that either
      #         (1) "Version Packages" PR was just merged, or
      #         (2) no commits with changesets have been merged after packages were last published.
      #
      #       In either way, we'll attempt to publish the packages. In case of (1), publish will succeed. In
      #       case of (2), `@changesets/action` will know that UI packages have already published and will
      #       skip publish.

  build-test:
    runs-on: ubuntu-latest
    needs: setup
    environment: ci
    if: ${{ needs.setup.outputs.has-changesets != 'true' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Add Amplify CLI
        run: yarn global add @aws-amplify/cli
      - name: Get CLI versions
        id: cli-version
        run: echo "::set-output name=version::$(amplify --version)"
      - name: Create or restore environments cache
        id: environments-cache
        uses: actions/cache@v2
        with:
          path: canary/environments/**/aws-exports.js
          key: ${{ runner.os }}-canary-environments-${{ steps.cli-version.outputs.version }}-${{ hashFiles('canary/environments/**/amplify/**') }}
      - name: Pull down AWS environments
        if: steps.environments-cache.outputs.cache-hit != 'true'
        run: yarn pull
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./canary
      - name: Setup canary apps against @next
        run: yarn setup:next
        working-directory: ./canary
      - name: Run yarn install on each sample app
        run: yarn install
        working-directory: ./canary
      - name: Run yarn build on each sample app
        run: yarn build
        working-directory: ./canary

  publish:
    runs-on: ubuntu-latest
    environment: deployment
    needs: build-test
    if: ${{ needs.setup.outputs.has-changesets != 'true' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - name: Setup Node.js LTS
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: Install packages
        uses: ./.github/actions/install-with-retries
        with:
          skip-cypress-binary: true # publishing doesn't need cypress
      - name: Build packages
        run: yarn build
      - name: Publish to @latest
        uses: changesets/action@b98cec97583b917ff1dc6179dd4d230d3e439894
        with:
          publish: yarn publish:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  log-failure-metric:
    # Send data point 1 to metric PublishLatestFailure, if it's a failure
    runs-on: ubuntu-latest
    environment: ci
    needs: publish
    if: ${{ failure() }}
    steps:
      - name: Log failure data point to metric PublishLatestFailure
        uses: aws-amplify/amplify-ui/.github/actions/log-metric@main
        with:
          metric-name: PublishLatestFailure
          value: 1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  log-success-metric:
    # Send data point 0 to metric PublishLatestFailure, if  it's a success
    runs-on: ubuntu-latest
    environment: ci
    needs: publish
    if: ${{ success() }}
    steps:
      - name: Log success data point to metric PublishLatestFailure
        uses: aws-amplify/amplify-ui/.github/actions/log-metric@main
        with:
          metric-name: PublishLatestFailure
          value: 0
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
