// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Props Table 1`] = `
"{
    \\"Alert\\": {
        \\"Alert\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"'info' | 'error' | 'warning' | 'success'\\",
                        \\"description\\": \\"The variation property will affect the background color of the Alert.\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDismissible\\": {
                        \\"name\\": \\"isDismissible\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"The isDismissible property will affect whether the user can dismiss (close) the Alert. Defaults to false (not dismissible).\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dismissButtonLabel\\": {
                        \\"name\\": \\"dismissButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Configures the accessible label for the Alert's dismiss button.\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onDismiss\\": {
                        \\"name\\": \\"onDismiss\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"The onDismiss callback will be called when the user dismisses (closes) the Alert.\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasIcon\\": {
                        \\"name\\": \\"hasIcon\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"The hasIcon property will determine whether or not an icon is displayed on the Alert. Defaults to true (icon displayed).\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"heading\\": {
                        \\"name\\": \\"heading\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"The heading property will affect the content of the Alert heading.\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"buttonRef\\": {
                        \\"name\\": \\"buttonRef\\",
                        \\"type\\": \\"React.Ref<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"The ref will be forwarded to the dismiss button\\",
                        \\"category\\": \\"BaseAlertProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Autocomplete\\": {
        \\"Autocomplete\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"options\\": {
                        \\"name\\": \\"options\\",
                        \\"type\\": \\"ComboBoxOption[]\\",
                        \\"description\\": \\"A list of options\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": false
                    },
                    \\"menuSlots\\": {
                        \\"name\\": \\"menuSlots\\",
                        \\"type\\": \\"PrimitiveProps<BaseAutocompleteMenuProps, Element>\\",
                        \\"description\\": \\"A colleciton of slots to customize the dropdown of options\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoading\\": {
                        \\"name\\": \\"isLoading\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used to indicate if the autocomplete in loading state Default: false\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": true
                    },
                    \\"optionFilter\\": {
                        \\"name\\": \\"optionFilter\\",
                        \\"type\\": \\"((option: ComboBoxOption, value: string) => boolean) | undefined\\",
                        \\"description\\": \\"Custom filter that will be applied to options.\\\\n\\\\nNote: Applying custom filter to options will disable match highlighting.\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": true
                    },
                    \\"renderOption\\": {
                        \\"name\\": \\"renderOption\\",
                        \\"type\\": \\"((option: ComboBoxOption, value: string) => React.ReactNode) | undefined\\",
                        \\"description\\": \\"Used to customize the rendering of an option inside the li element\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onSelect\\": {
                        \\"name\\": \\"onSelect\\",
                        \\"type\\": \\"((option: ComboBoxOption) => void) | undefined\\",
                        \\"description\\": \\"Triggered when an option is selected\\",
                        \\"category\\": \\"BaseAutocompleteProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the initial value for an uncontrolled search field\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the value for a controlled search field\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasSearchButton\\": {
                        \\"name\\": \\"hasSearchButton\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used to determine whether to render a search button on the right Default: true\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasSearchIcon\\": {
                        \\"name\\": \\"hasSearchIcon\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used to determine whether to render a search icon on the left when there is no search button Default: false\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onSubmit\\": {
                        \\"name\\": \\"onSubmit\\",
                        \\"type\\": \\"((value: string) => void) | undefined\\",
                        \\"description\\": \\"Handle submission of search field input\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClear\\": {
                        \\"name\\": \\"onClear\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Triggered when search field is cleared\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label Default: true\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"clearButtonLabel\\": {
                        \\"name\\": \\"clearButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the \`aria-label\` for clear button Default: \\\\\\"Clear search\\\\\\"\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchButtonRef\\": {
                        \\"name\\": \\"searchButtonRef\\",
                        \\"type\\": \\"React.Ref<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Provides ref access to search button DOM element\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Badge\\": {
        \\"Badge\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"'info' | 'error' | 'warning' | 'success'\\",
                        \\"description\\": \\"The variation property will affect the background color of the badge.\\",
                        \\"category\\": \\"BaseBadgeProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"The size property will affect the font size of the badge.\\",
                        \\"category\\": \\"BaseBadgeProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Button\\": {
        \\"Button\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will be disabled.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isFullWidth\\": {
                        \\"name\\": \\"isFullWidth\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will take up the full width of its container.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoading\\": {
                        \\"name\\": \\"isLoading\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will show a spinner.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"loadingText\\": {
                        \\"name\\": \\"loadingText\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"The label to show in the button when \`loading\` is true\\\\nIf no text is passed, it only shows the spinner\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClick\\": {
                        \\"name\\": \\"onClick\\",
                        \\"type\\": \\"React.MouseEventHandler<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Button click event handler\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the size of the button. Default: \\\\\\"medium\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'button' | 'reset' | 'submit'\\",
                        \\"description\\": \\"Changes the button type Default: \\\\\\"button\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'link'\\\\n  | 'menu'\\\\n  | 'warning'\\\\n  | 'destructive'\\",
                        \\"description\\": \\"Changes the visual weight of the button.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Card\\": {
        \\"Card\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"'outlined' | 'elevated'\\",
                        \\"description\\": \\"Changes the displayed style of the Card. Options include ‘outlined’, ‘elevated’ and none (default)\\",
                        \\"category\\": \\"BaseCardProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"CheckboxField\\": {
        \\"CheckboxField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Sets the label text\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Default: false\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": false
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelPosition\\": {
                        \\"name\\": \\"labelPosition\\",
                        \\"type\\": \\"'start' | 'end' | 'top' | 'bottom'\\",
                        \\"description\\": \\"Sets the position of label in relation to the CheckboxField, Default: \\\\\\"start\\\\\\"\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isIndeterminate\\": {
                        \\"name\\": \\"isIndeterminate\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether a checkbox is in indeterminate state Default: false\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseCheckboxProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Collection\\": {
        \\"Collection\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'list' | 'grid' | 'table'\\",
                        \\"description\\": \\"Collection type. This will be used to determine collection wrapper component. Default: 'list'\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isPaginated\\": {
                        \\"name\\": \\"isPaginated\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Enable pagination for collection items\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"itemsPerPage\\": {
                        \\"name\\": \\"itemsPerPage\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Page size (when pagination is enabled)\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isSearchable\\": {
                        \\"name\\": \\"isSearchable\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Enable collection filtering\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchFilter\\": {
                        \\"name\\": \\"searchFilter\\",
                        \\"type\\": \\"((item: unknown, searchText: string) => boolean) | undefined\\",
                        \\"description\\": \\"Custom search filter (when search is enabled)\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchLabel\\": {
                        \\"name\\": \\"searchLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Search field label Default: \\\\\\"Search\\\\\\"\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchPlaceholder\\": {
                        \\"name\\": \\"searchPlaceholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Search field placeholder\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchNoResultsFound\\": {
                        \\"name\\": \\"searchNoResultsFound\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Controls what is displayed when no results are found from the Collection search\\",
                        \\"category\\": \\"CollectionWrapperProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"items\\": {
                        \\"name\\": \\"items\\",
                        \\"type\\": \\"Item[]\\",
                        \\"description\\": \\"The items from a data source that will be mapped by the Collection component\\",
                        \\"category\\": \\"CollectionBaseProps\\",
                        \\"isOptional\\": false
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"(item: Item, index: number) => JSX.Element\\",
                        \\"description\\": \\"The component to be repeated\\\\nSame interface as Array.prototype.map\\",
                        \\"category\\": \\"CollectionChildren\\",
                        \\"isOptional\\": false
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Divider\\": {
        \\"Divider\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"orientation\\": {
                        \\"name\\": \\"orientation\\",
                        \\"type\\": \\"'horizontal' | 'vertical'\\",
                        \\"description\\": \\"Controls whether the divider is oriented horizontally or vertically. Default: \\\\\\"horizontal\\\\\\"\\",
                        \\"category\\": \\"DividerOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Size of the divider (height for a horizontal divider, width for vertical) Default: \\\\\\"small\\\\\\"\\",
                        \\"category\\": \\"DividerOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Adds text to the divider, usually something like \\\\\\"or\\\\\\" to separate 2 things.\\",
                        \\"category\\": \\"DividerOptions\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Expander\\": {
        \\"Expander\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | string[] | undefined\\",
                        \\"description\\": \\"The value of the item(s) to expand.  Use on uncontrolled component.\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | string[] | undefined\\",
                        \\"description\\": \\"The controlled value of the item(s) to expand. Must be used in conjunction with onChange.\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isCollapsible\\": {
                        \\"name\\": \\"isCollapsible\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether the opened item can be collapsed if this is a single expander.\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'single' | 'multiple'\\",
                        \\"description\\": \\"Determines whether one or multiple items can be opened at the same time.\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"((value?: string | string[] | undefined) => void) | undefined\\",
                        \\"description\\": \\"replace usage with \`onValueChange\`\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onValueChange\\": {
                        \\"name\\": \\"onValueChange\\",
                        \\"type\\": \\"((value?: string | string[] | undefined) => void) | undefined\\",
                        \\"description\\": \\"Event handler called when the expanded state of an item changes\\",
                        \\"category\\": \\"BaseExpanderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"ExpanderItem\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"title\\": {
                        \\"name\\": \\"title\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"The content of the heading.\\",
                        \\"category\\": \\"BaseExpanderItemProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"A unique value for the item.\\",
                        \\"category\\": \\"BaseExpanderItemProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Flex\\": {
        \\"Flex\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Grid\\": {
        \\"Grid\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoColumns\\": {
                        \\"name\\": \\"autoColumns\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoColumns<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Specifies the size of an implicitly-created grid column track or pattern of tracks. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoFlow\\": {
                        \\"name\\": \\"autoFlow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoFlow> | undefined\\",
                        \\"description\\": \\"Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoRows\\": {
                        \\"name\\": \\"autoRows\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoRows<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Specifies the size of an implicitly-created grid row track or pattern of tracks. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateAreas\\": {
                        \\"name\\": \\"templateAreas\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateAreas> | undefined\\",
                        \\"description\\": \\"specifies named grid areas, establishing the cells in the grid and assigning them names. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateColumns\\": {
                        \\"name\\": \\"templateColumns\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateColumns<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Defines the line names and track sizing functions of the grid columns. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateRows\\": {
                        \\"name\\": \\"templateRows\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateRows<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Defines the line names and track sizing functions of the grid rows. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"number | string | 'auto'\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"number | string | 'auto'\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoColumns\\": {
                        \\"name\\": \\"autoColumns\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoColumns<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Specifies the size of an implicitly-created grid column track or pattern of tracks. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoFlow\\": {
                        \\"name\\": \\"autoFlow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoFlow> | undefined\\",
                        \\"description\\": \\"Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoRows\\": {
                        \\"name\\": \\"autoRows\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridAutoRows<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Specifies the size of an implicitly-created grid row track or pattern of tracks. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateAreas\\": {
                        \\"name\\": \\"templateAreas\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateAreas> | undefined\\",
                        \\"description\\": \\"specifies named grid areas, establishing the cells in the grid and assigning them names. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateColumns\\": {
                        \\"name\\": \\"templateColumns\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateColumns<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Defines the line names and track sizing functions of the grid columns. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"templateRows\\": {
                        \\"name\\": \\"templateRows\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridTemplateRows<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Defines the line names and track sizing functions of the grid rows. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows)\\",
                        \\"category\\": \\"GridContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"number | string | 'auto'\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"number | string | 'auto'\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Heading\\": {
        \\"Heading\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"level\\": {
                        \\"name\\": \\"level\\",
                        \\"type\\": \\"1 | 2 | 3 | 4 | 5 | 6\\",
                        \\"description\\": \\"Controls which semantic section heading element is rendered, <h1> through <h6>\\",
                        \\"category\\": \\"BaseHeadingProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'secondary'\\\\n  | 'tertiary'\\\\n  | 'error'\\\\n  | 'warning'\\\\n  | 'info'\\\\n  | 'success'\\",
                        \\"description\\": \\"This should be the primary way to handle different styles of text. Lower-level\\\\ntext styling attributes like color can be set directly, that should be more of an\\\\nescape hatch.\\",
                        \\"category\\": \\"BaseTextProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isTruncated\\": {
                        \\"name\\": \\"isTruncated\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"This attribute will be used to indicate if the text component should truncate text\\\\nthat exceeds the width of the text element.  Truncated text will render an ellipsis.\\",
                        \\"category\\": \\"BaseTextProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"HighlightMatch\\": {
        \\"HighlightMatch\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"The label you would like to have match highlighting\\",
                        \\"category\\": \\"BaseHighlightMatchProps\\",
                        \\"isOptional\\": false
                    },
                    \\"query\\": {
                        \\"name\\": \\"query\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"A query string used to match against the label\\",
                        \\"category\\": \\"BaseHighlightMatchProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Icon\\": {
        \\"Icon\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"pathData\\": {
                        \\"name\\": \\"pathData\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"This defines the shape of the <path> SVG element(the 'd' attribute). See: [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path)\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"ariaLabel\\": {
                        \\"name\\": \\"ariaLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"This is used to define a string that labels the current element.\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"viewBox\\": {
                        \\"name\\": \\"viewBox\\",
                        \\"type\\": \\"{\\\\n  minX?: number;\\\\n  minY?: number;\\\\n  width?: number;\\\\n  height?: number;\\\\n}\\",
                        \\"description\\": \\"This defines the position and dimension, in user space, of an SVG viewport. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox)\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"fill\\": {
                        \\"name\\": \\"fill\\",
                        \\"type\\": \\"Property.Color | undefined\\",
                        \\"description\\": \\"By default this will be \\\\\\"currentColor\\\\\\" to match what is generally expected of icons (they inherit their color from current font color). See: [MDN](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill)\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"You can pass SVG elements like <path> directly as children for more\\\\nflexibility and to allow for multiple paths.\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"paths\\": {
                        \\"name\\": \\"paths\\",
                        \\"type\\": \\"React.SVGAttributes<SVGPathElement>[] | undefined\\",
                        \\"description\\": \\"Optionally pass an array of path-like objects which\\\\nthe icon will map to <path> elements.\\",
                        \\"category\\": \\"BaseIconProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Image\\": {
        \\"Image\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alt\\": {
                        \\"name\\": \\"alt\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Alternative text description of the image (required). See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-alt)\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": false
                    },
                    \\"sizes\\": {
                        \\"name\\": \\"sizes\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set of image source sizes. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes)\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"src\\": {
                        \\"name\\": \\"src\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"URl source for image (required).\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": false
                    },
                    \\"srcSet\\": {
                        \\"name\\": \\"srcSet\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Possible image sources for the browser to use. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset)\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"onLoad\\": {
                        \\"name\\": \\"onLoad\\",
                        \\"type\\": \\"((event: React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined\\",
                        \\"description\\": \\"Handles loading event on image.\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"onError\\": {
                        \\"name\\": \\"onError\\",
                        \\"type\\": \\"((error: string | React.SyntheticEvent<HTMLImageElement, Event>) => void) | undefined\\",
                        \\"description\\": \\"Handles error events on image.\\",
                        \\"category\\": \\"ImageOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"objectFit\\": {
                        \\"name\\": \\"objectFit\\",
                        \\"type\\": \\"ResponsiveStyle<Property.ObjectFit> | undefined\\",
                        \\"description\\": \\" Sets how the content of an <img> should be resized to fit its container\\",
                        \\"category\\": \\"ImageStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"objectPosition\\": {
                        \\"name\\": \\"objectPosition\\",
                        \\"type\\": \\"ResponsiveStyle<Property.ObjectPosition<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\" Specifies the alignment of the selected replaced element's contents within the element's box\\",
                        \\"category\\": \\"ImageStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Link\\": {
        \\"Link\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the Link component\\",
                        \\"category\\": \\"BaseLinkProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isExternal\\": {
                        \\"name\\": \\"isExternal\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Boolean value indicating an external link\\\\nsets the rel attribute to \\\\\\"noopener noreferrer\\\\\\"\\",
                        \\"category\\": \\"LinkOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"href\\": {
                        \\"name\\": \\"href\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"a stringifier that returns a string containing the whole URL, and allows the href to be updated. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/href)\\",
                        \\"category\\": \\"LinkOptions\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Loader\\": {
        \\"Loader\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"This will set the size of Loader.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"linear\\\\\\" | undefined\\",
                        \\"description\\": \\"This will set the variation of Loader. Available options are linear and none(circular).\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"filledColor\\": {
                        \\"name\\": \\"filledColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"This will set the filled color of Loader.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"emptyColor\\": {
                        \\"name\\": \\"emptyColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"This will set the empty color of Loader.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"percentage\\": {
                        \\"name\\": \\"percentage\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"This will set the percentage of a determinate Loader.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDeterminate\\": {
                        \\"name\\": \\"isDeterminate\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"This will mark the Loader as determinate.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isPercentageTextHidden\\": {
                        \\"name\\": \\"isPercentageTextHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"This will set the visibility of percentage text.\\",
                        \\"category\\": \\"BaseLoaderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Menu\\": {
        \\"Menu\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"menuAlign\\": {
                        \\"name\\": \\"menuAlign\\",
                        \\"type\\": \\"\\\\\\"center\\\\\\" | \\\\\\"end\\\\\\" | \\\\\\"start\\\\\\" | undefined\\",
                        \\"description\\": \\"Alignment of menu against trigger Default: \\\\\\"start\\\\\\"\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onOpenChange\\": {
                        \\"name\\": \\"onOpenChange\\",
                        \\"type\\": \\"((isOpen: boolean) => void) | undefined\\",
                        \\"description\\": \\"Handle open and close event of menu\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isOpen\\": {
                        \\"name\\": \\"isOpen\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Default for controlled menu\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Size of Menu button and items\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"trigger\\": {
                        \\"name\\": \\"trigger\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Trigger node Default: MenuButton with IconMenu Note: Must forward refs to DOM element\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"triggerClassName\\": {
                        \\"name\\": \\"triggerClassName\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"ClassName to apply to default trigger button\\\\nNote: only applies if \`trigger\` prop is null\\",
                        \\"category\\": \\"BaseMenuProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"MenuButton\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will be disabled.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isFullWidth\\": {
                        \\"name\\": \\"isFullWidth\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will take up the full width of its container.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoading\\": {
                        \\"name\\": \\"isLoading\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will show a spinner.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"loadingText\\": {
                        \\"name\\": \\"loadingText\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"The label to show in the button when \`loading\` is true\\\\nIf no text is passed, it only shows the spinner\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClick\\": {
                        \\"name\\": \\"onClick\\",
                        \\"type\\": \\"React.MouseEventHandler<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Button click event handler\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the size of the button. Default: \\\\\\"medium\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'button' | 'reset' | 'submit'\\",
                        \\"description\\": \\"Changes the button type Default: \\\\\\"button\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'link'\\\\n  | 'menu'\\\\n  | 'warning'\\\\n  | 'destructive'\\",
                        \\"description\\": \\"Changes the visual weight of the button.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"MenuItem\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Accepts any number of MenuItem components\\",
                        \\"category\\": \\"BaseMenuItemProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will be disabled.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isFullWidth\\": {
                        \\"name\\": \\"isFullWidth\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will take up the full width of its container.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoading\\": {
                        \\"name\\": \\"isLoading\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will show a spinner.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"loadingText\\": {
                        \\"name\\": \\"loadingText\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"The label to show in the button when \`loading\` is true\\\\nIf no text is passed, it only shows the spinner\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClick\\": {
                        \\"name\\": \\"onClick\\",
                        \\"type\\": \\"React.MouseEventHandler<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Button click event handler\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the size of the button. Default: \\\\\\"medium\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'button' | 'reset' | 'submit'\\",
                        \\"description\\": \\"Changes the button type Default: \\\\\\"button\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'link'\\\\n  | 'menu'\\\\n  | 'warning'\\\\n  | 'destructive'\\",
                        \\"description\\": \\"Changes the visual weight of the button.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Pagination\\": {
        \\"Pagination\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"currentPage\\": {
                        \\"name\\": \\"currentPage\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Index of the current page. (starting from 1)\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"totalPages\\": {
                        \\"name\\": \\"totalPages\\",
                        \\"type\\": \\"number\\",
                        \\"description\\": \\"Total number of available pages.\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": false
                    },
                    \\"siblingCount\\": {
                        \\"name\\": \\"siblingCount\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"The number of siblings on each side of current page.\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasMorePages\\": {
                        \\"name\\": \\"hasMorePages\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Optionally indicates whether there are more pages after \`totalPages\`. Can be combined with \`totalPages\` to enable the next button when reaching the last page. Default: false\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"currentPageLabel\\": {
                        \\"name\\": \\"currentPageLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the invisible label for current page. Default: \\\\\\"Current Page:\\\\\\"\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"pageLabel\\": {
                        \\"name\\": \\"pageLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the label text for each page button other than the current page.\\\\nIt will be used to construct the \`aria-label\` for each page button. e.g, \\\\\\"Go to page 1\\\\\\" for page 1 button Default: \\\\\\"Go to page\\\\\\"\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"previousLabel\\": {
                        \\"name\\": \\"previousLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the \`aria-label\` for the left arrow button. Default: \\\\\\"Go to previous page\\\\\\"\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"nextLabel\\": {
                        \\"name\\": \\"nextLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the \`aria-label\` for the right arrow button. Default: \\\\\\"Go to next page\\\\\\"\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onNext\\": {
                        \\"name\\": \\"onNext\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Callback function triggered when the next-page button is pressed\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onPrevious\\": {
                        \\"name\\": \\"onPrevious\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Callback function triggered when the prev-page button is pressed\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"((newPageIndex?: number | undefined, prevPageIndex?: number | undefined) => void) | undefined\\",
                        \\"description\\": \\"Callback function triggered every time the page changes\\",
                        \\"category\\": \\"BasePaginationProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"PasswordField\\": {
        \\"PasswordField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hideShowPassword\\": {
                        \\"name\\": \\"hideShowPassword\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"For password fields, will hide the \\\\\\"show password\\\\\\" button\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hidePasswordButtonLabel\\": {
                        \\"name\\": \\"hidePasswordButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"The hidePasswordButtonLabel prop is no longer in use, since the aria-label is now consistent between state changes. Set the \`aria-label\` for hide password button Default: \\\\\\"Hide password\\\\\\"\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"passwordIsHiddenLabel\\": {
                        \\"name\\": \\"passwordIsHiddenLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the text read by screen readers when the password is hidden Default: \\\\\\"Password is hidden\\\\\\"\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"passwordIsShownLabel\\": {
                        \\"name\\": \\"passwordIsShownLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the text read by screen readers when the password is shown Default: \\\\\\"Password is shown\\\\\\"\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"showPasswordButtonLabel\\": {
                        \\"name\\": \\"showPasswordButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the \`aria-label\` for show password button Default: \\\\\\"Show password\\\\\\"\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Password autocomplete type See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values) Default: \\\\\\"current-password\\\\\\"\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"showPasswordButtonRef\\": {
                        \\"name\\": \\"showPasswordButtonRef\\",
                        \\"type\\": \\"React.Ref<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Forwarded ref for access to show password button DOM element\\",
                        \\"category\\": \\"BasePasswordFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"PhoneNumberField\\": {
        \\"PhoneNumberField\\": [
            {
                \\"Main\\": {
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"\\\\\\"tel\\\\\\" | undefined\\",
                        \\"description\\": \\"<input> elements of type 'tel' are used to let the user enter and edit a telephone number\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dialCodeLabel\\": {
                        \\"name\\": \\"dialCodeLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets a hidden and accessible label for the dial code selector\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dialCodeName\\": {
                        \\"name\\": \\"dialCodeName\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the name used when handling form submission for the dial code selector\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dialCodeList\\": {
                        \\"name\\": \\"dialCodeList\\",
                        \\"type\\": \\"string[] | undefined\\",
                        \\"description\\": \\"Accepts an array of dial codes (strings) used as options in the dial code selector\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onDialCodeChange\\": {
                        \\"name\\": \\"onDialCodeChange\\",
                        \\"type\\": \\"React.ChangeEventHandler<HTMLSelectElement> | undefined\\",
                        \\"description\\": \\"Handles change events for the dial code selector\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dialCodeRef\\": {
                        \\"name\\": \\"dialCodeRef\\",
                        \\"type\\": \\"React.Ref<HTMLSelectElement> | undefined\\",
                        \\"description\\": \\"Forwarded ref for access to Dial Code select DOM element\\",
                        \\"category\\": \\"optionalPhoneNumberFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"countryCodeLabel\\": {
                        \\"name\\": \\"countryCodeLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets a hidden and accessible label for the dial code selector To be removed with next major version release, please use dialCodeLabel\\",
                        \\"category\\": \\"CountryCodeFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"countryCodeName\\": {
                        \\"name\\": \\"countryCodeName\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the name used when handling form submission for the dial code selector To be removed with next major version release, please use dialCodeName\\",
                        \\"category\\": \\"CountryCodeFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onCountryCodeChange\\": {
                        \\"name\\": \\"onCountryCodeChange\\",
                        \\"type\\": \\"React.ChangeEventHandler<HTMLSelectElement> | undefined\\",
                        \\"description\\": \\"Handles change events for the dial code selector To be removed with next major version release, please use onDialCodeChange\\",
                        \\"category\\": \\"CountryCodeFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"countryCodeRef\\": {
                        \\"name\\": \\"countryCodeRef\\",
                        \\"type\\": \\"React.Ref<HTMLSelectElement> | undefined\\",
                        \\"description\\": \\"Forwarded ref for access to Country Code select DOM element To be removed with next major version release, please use dialCodeRef\\",
                        \\"category\\": \\"CountryCodeFieldProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Placeholder\\": {
        \\"Placeholder\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoaded\\": {
                        \\"name\\": \\"isLoaded\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If true, the placeholder won't show, if false the placeholder will show. Default: false\\",
                        \\"category\\": \\"BasePlaceholderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Controls the display size of placeholder\\",
                        \\"category\\": \\"BasePlaceholderProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"RadioGroupField\\": {
        \\"RadioGroupField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseRadioGroupFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseRadioGroupFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseRadioGroupFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"React.ChangeEventHandler<HTMLInputElement> | undefined\\",
                        \\"description\\": \\"Handle onChange event\\",
                        \\"category\\": \\"BaseRadioGroupFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"labelPosition\\": {
                        \\"name\\": \\"labelPosition\\",
                        \\"type\\": \\"'start' | 'end' | 'top' | 'bottom'\\",
                        \\"description\\": \\"Position of label in relation to the radio,\\\\ndefault is 'start'\\",
                        \\"category\\": \\"BaseRadioGroupFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"Radio\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseRadioProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelPosition\\": {
                        \\"name\\": \\"labelPosition\\",
                        \\"type\\": \\"'start' | 'end' | 'top' | 'bottom'\\",
                        \\"description\\": \\"Position of label in relation to the radio,\\\\ndefault is 'start'\\",
                        \\"category\\": \\"BaseRadioProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\" Determines whether field should be disabled. Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Rating\\": {
        \\"Rating\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"emptyColor\\": {
                        \\"name\\": \\"emptyColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"The CSS color to use on the empty rating icon\\\\nDefault css value is #A2A2A2\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"emptyIcon\\": {
                        \\"name\\": \\"emptyIcon\\",
                        \\"type\\": \\"JSX.Element | undefined\\",
                        \\"description\\": \\"This will override which icon to use as the empty icon. This will only\\\\noverride the empty icon an will create a rating component that uses\\\\ndifferent icons for filled and empty icons.\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"fillColor\\": {
                        \\"name\\": \\"fillColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"The CSS color to use on the filled rating icon\\\\nDefault css value is #ffb400\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"icon\\": {
                        \\"name\\": \\"icon\\",
                        \\"type\\": \\"JSX.Element | undefined\\",
                        \\"description\\": \\"This will override which icon to use. This will override both\\\\nthe filled and empty icon values unless an empty icon is specified\\\\nwith the emptyIcon prop\\\\nDefault is <IconStar />\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"maxValue\\": {
                        \\"name\\": \\"maxValue\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"The max rating integer value\\\\nDefault is 5\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"This will set the icon size of the stars\\\\nDefault css value is medium\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"The value of the rating\\\\nDefault is 0\\",
                        \\"category\\": \\"RatingOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"ScrollView\\": {
        \\"ScrollView\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"orientation\\": {
                        \\"name\\": \\"orientation\\",
                        \\"type\\": \\"'horizontal' | 'vertical'\\",
                        \\"description\\": \\"This prop has been deprecated. To get horizontal or vertical scrollbars,\\\\nmake the width or height of the ScrollView component smaller than the content.\\",
                        \\"category\\": \\"BaseScrollViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"SearchField\\": {
        \\"SearchField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the initial value for an uncontrolled search field\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the value for a controlled search field\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasSearchButton\\": {
                        \\"name\\": \\"hasSearchButton\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used to determine whether to render a search button on the right Default: true\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasSearchIcon\\": {
                        \\"name\\": \\"hasSearchIcon\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used to determine whether to render a search icon on the left when there is no search button Default: false\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onSubmit\\": {
                        \\"name\\": \\"onSubmit\\",
                        \\"type\\": \\"((value: string) => void) | undefined\\",
                        \\"description\\": \\"Handle submission of search field input\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClear\\": {
                        \\"name\\": \\"onClear\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Triggered when search field is cleared\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label Default: true\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"clearButtonLabel\\": {
                        \\"name\\": \\"clearButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the \`aria-label\` for clear button Default: \\\\\\"Clear search\\\\\\"\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"searchButtonRef\\": {
                        \\"name\\": \\"searchButtonRef\\",
                        \\"type\\": \\"React.Ref<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Provides ref access to search button DOM element\\",
                        \\"category\\": \\"BaseSearchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"SelectField\\": {
        \\"SelectField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"options\\": {
                        \\"name\\": \\"options\\",
                        \\"type\\": \\"string[] | undefined\\",
                        \\"description\\": \\"List of option values for select dropdown\\",
                        \\"category\\": \\"BaseSelectFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"A string providing a hint for a user agent's autocomplete feature\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies the name of the control used when submitting form data\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the SelectField’s initial value on render\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Controls the current value when using the SelectField as a controlled component\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the height and font size of the SelectField. Available options are ‘small’, none (default), and ‘large’\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Changes the displayed style of the SelectField. Options include ‘quiet’ and none (default)\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"icon\\": {
                        \\"name\\": \\"icon\\",
                        \\"type\\": \\"React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined\\",
                        \\"description\\": \\"Changes the icon used to expand and collapse the SelectField\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"iconColor\\": {
                        \\"name\\": \\"iconColor\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Controls the color of the icon used to expand and collapse the SelectField\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Sets the text that appears in the form control when it has no value set\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Marks the SelectField as having a validation error\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"A Boolean attribute indicating that an option with a non-empty string value must be selected\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"React.ChangeEventHandler<HTMLSelectElement> | undefined\\",
                        \\"description\\": \\"Handles changes to the current value when using the SelectField as a controlled component\\",
                        \\"category\\": \\"BaseSelectProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"SliderField\\": {
        \\"SliderField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"min\\": {
                        \\"name\\": \\"min\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the minimum value for the SliderField range\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"max\\": {
                        \\"name\\": \\"max\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the maximum value for the SliderField range\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"step\\": {
                        \\"name\\": \\"step\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Controls the interval between selectable values\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"orientation\\": {
                        \\"name\\": \\"orientation\\",
                        \\"type\\": \\"'horizontal' | 'vertical'\\",
                        \\"description\\": \\"Changes the orientation of the SliderField to either 'vertical' or 'horizontal' (default)\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isValueHidden\\": {
                        \\"name\\": \\"isValueHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"When \`true\`, hides the numerical value to the right of the label\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"trackSize\\": {
                        \\"name\\": \\"trackSize\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Controls the width of the track and size of the thumb. Options include 'small', none (default), and 'large'\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"emptyTrackColor\\": {
                        \\"name\\": \\"emptyTrackColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"Applies to the empty part of the SliderField track\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"filledTrackColor\\": {
                        \\"name\\": \\"filledTrackColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"Applies to the filled-in part of the SliderField track\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"thumbColor\\": {
                        \\"name\\": \\"thumbColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"Applies to the thumb component that users can slide\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Controls the current value when using the SliderField as a controlled component\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the SliderField’s initial value on render\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"formatValue\\": {
                        \\"name\\": \\"formatValue\\",
                        \\"type\\": \\"((value: number) => React.ReactNode) | undefined\\",
                        \\"description\\": \\"Use to format how the value gets rendered\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"((value: number) => void) | undefined\\",
                        \\"description\\": \\"Handles changes to the current value when using the SliderField as a controlled component\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"dir\\": {
                        \\"name\\": \\"dir\\",
                        \\"type\\": \\"'ltr' | 'rtl'\\",
                        \\"description\\": \\"sets the direction of the slider. See: [Radix docs](https://www.radix-ui.com/docs/primitives/components/slider)\\",
                        \\"category\\": \\"BaseSliderFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"'ltr' | 'rtl'\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"StepperField\\": {
        \\"StepperField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"\\\\\\"number\\\\\\" | undefined\\",
                        \\"description\\": \\"<input> elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"min\\": {
                        \\"name\\": \\"min\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the minimum possible value\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"max\\": {
                        \\"name\\": \\"max\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the maximum possible value\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"step\\": {
                        \\"name\\": \\"step\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Controls the interval between selectable values\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Controls the current value when using the StepperField as a controlled component\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Sets the StepperField’s initial value on render\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"increaseButtonLabel\\": {
                        \\"name\\": \\"increaseButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the label text for increase button.\\\\nThis will be used to construct its the \`aria-label\`. e.g., \\\\\\"Increase to 2\\\\\\" if the current step is 1. Default: \\\\\\"Increase to\\\\\\"\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"decreaseButtonLabel\\": {
                        \\"name\\": \\"decreaseButtonLabel\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Set the label text for decrease button.\\\\nThis will be used to construct its the \`aria-label\`. e.g., \\\\\\"Decrease to 0\\\\\\" if the current step is 1. Default: \\\\\\"Decrease to\\\\\\"\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onStepChange\\": {
                        \\"name\\": \\"onStepChange\\",
                        \\"type\\": \\"((value: number) => void) | undefined\\",
                        \\"description\\": \\"Event handler called with the current step value when it is updated\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onIncrease\\": {
                        \\"name\\": \\"onIncrease\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Handles the event when a user clicks on the increment button\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onDecrease\\": {
                        \\"name\\": \\"onDecrease\\",
                        \\"type\\": \\"(() => void) | undefined\\",
                        \\"description\\": \\"Handles the event when a user clicks on the decrement button\\",
                        \\"category\\": \\"BaseStepperFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextFieldOptions\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"SwitchField\\": {
        \\"SwitchField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Use this to provide a default checked value for an uncontrolled SwitchField\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isChecked\\": {
                        \\"name\\": \\"isChecked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If isChecked is provided, this will be a controlled SwitchField\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"This property will set the switch to disabled\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLabelHidden\\": {
                        \\"name\\": \\"isLabelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide the label, but the associated label text will still be required for accessibility.\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelPosition\\": {
                        \\"name\\": \\"labelPosition\\",
                        \\"type\\": \\"'start' | 'end' | 'top' | 'bottom'\\",
                        \\"description\\": \\"Position of label in relation to the switchfield\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"This prop adds a name attribute to the input element\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"React.ChangeEventHandler<HTMLInputElement> | undefined\\",
                        \\"description\\": \\"Assign an onChange event to the switch field\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"This prop adjusts the size of the switch component\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"thumbColor\\": {
                        \\"name\\": \\"thumbColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"This property will change the color of the thumb in the switch component\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"trackColor\\": {
                        \\"name\\": \\"trackColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"This property will change the color of the track in the switch component\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"trackCheckedColor\\": {
                        \\"name\\": \\"trackCheckedColor\\",
                        \\"type\\": \\"StyleToken<Property.Color> | undefined\\",
                        \\"description\\": \\"This property will change the color of the checked track in the switch component\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | number | undefined\\",
                        \\"description\\": \\"This is the value of the switch input and will be submitted with a form submission\\",
                        \\"category\\": \\"BaseSwitchFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint | undefined\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode | undefined\\",
                        \\"description\\": \\" Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute | undefined\\",
                        \\"description\\": \\"Input field type.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"BaseInputProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Table\\": {
        \\"Table\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"caption\\": {
                        \\"name\\": \\"caption\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Optional caption which serves as an accessible title/caption for\\\\nthe table.\\",
                        \\"category\\": \\"BaseTableProps\\",
                        \\"isOptional\\": true
                    },
                    \\"highlightOnHover\\": {
                        \\"name\\": \\"highlightOnHover\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If set to true, will highlight a table row on hover. Default is false.\\",
                        \\"category\\": \\"BaseTableProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Affects font size and padding. Default is in between 'small' and 'large'.\\",
                        \\"category\\": \\"BaseTableProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"'bordered' | 'striped'\\",
                        \\"description\\": \\"Sets a supported style variation. Default is no specific variation.\\",
                        \\"category\\": \\"BaseTableProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TableBody\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TableCell\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"colspan\\": {
                        \\"name\\": \\"colspan\\",
                        \\"type\\": \\"Pick<React.HTMLProps<HTMLTableCellElement>, \\\\\\"colSpan\\\\\\"> | undefined\\",
                        \\"description\\": \\"Defines the number of columns spanned by a cell within a <table>\\",
                        \\"category\\": \\"BaseTableCellProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowspan\\": {
                        \\"name\\": \\"rowspan\\",
                        \\"type\\": \\"Pick<React.HTMLProps<HTMLTableCellElement>, \\\\\\"rowSpan\\\\\\"> | undefined\\",
                        \\"description\\": \\"Defines the number of rows spanned by a cell within a <table>\\",
                        \\"category\\": \\"BaseTableCellProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TableFoot\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TableHead\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TableRow\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Tabs\\": {
        \\"Tabs\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"The Tabs component only accepts TabItem components as children.\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": false
                    },
                    \\"defaultIndex\\": {
                        \\"name\\": \\"defaultIndex\\",
                        \\"type\\": \\"string | number | undefined\\",
                        \\"description\\": \\"Change which Tab content is initially displayed. Pass in the index of the Tab you wish to show. The default is index 0 (the first tab).\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": true
                    },
                    \\"currentIndex\\": {
                        \\"name\\": \\"currentIndex\\",
                        \\"type\\": \\"string | number | undefined\\",
                        \\"description\\": \\"The controlled index of the currently selected tab. This should be used with\\\\n\`onChange\` as well to make the component controlled.\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"((value: string | number) => void) | undefined\\",
                        \\"description\\": \\"For controlled usage, use the onChange event to listen to when a tab is clicked\\\\nand update the \`currentIndex\` accordingly. The index of the tab clicked is passed\\\\nto onChange.\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": true
                    },
                    \\"spacing\\": {
                        \\"name\\": \\"spacing\\",
                        \\"type\\": \\"'equal' | 'relative'\\",
                        \\"description\\": \\"Control how Tabs take up the remaining space. Pass \`equal\` to make each tab take up the same amount of space,\\\\nand \`relative\` to make each tab take up space relative to the size of its title.\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": true
                    },
                    \\"indicatorPosition\\": {
                        \\"name\\": \\"indicatorPosition\\",
                        \\"type\\": \\"\\\\\\"bottom\\\\\\" | \\\\\\"top\\\\\\" | undefined\\",
                        \\"description\\": \\"Sets the border and indicator of the tabs to be the top or bottom.\\",
                        \\"category\\": \\"BaseTabsProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"TabItem\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"title\\": {
                        \\"name\\": \\"title\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Change the title corresponding with each Tab's content panel.\\",
                        \\"category\\": \\"BaseTabItemProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Make a Tab not clickable and its content not visible to the user. Defaults to false (i.e., visible).\\",
                        \\"category\\": \\"BaseTabItemProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Accepts any number of TabItem components\\",
                        \\"category\\": \\"BaseTabItemProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"Text\\": {
        \\"Text\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'secondary'\\\\n  | 'tertiary'\\\\n  | 'error'\\\\n  | 'warning'\\\\n  | 'info'\\\\n  | 'success'\\",
                        \\"description\\": \\"This should be the primary way to handle different styles of text. Lower-level\\\\ntext styling attributes like color can be set directly, that should be more of an\\\\nescape hatch.\\",
                        \\"category\\": \\"BaseTextProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isTruncated\\": {
                        \\"name\\": \\"isTruncated\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"This attribute will be used to indicate if the text component should truncate text\\\\nthat exceeds the width of the text element.  Truncated text will render an ellipsis.\\",
                        \\"category\\": \\"BaseTextProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"TextAreaField\\": {
        \\"TextAreaField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"(BaseStyleProps & TextAreaStyleProps) | undefined\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"BaseTextAreaFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n(e.g. password requirements, etc.)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\" When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"BaseFieldProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\" See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"maxLength\\": {
                        \\"name\\": \\"maxLength\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Text contents maximum length.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Placeholder text shown when field is empty\\\\nAccessibility tip: avoid putting important instructions for\\\\nfilling out the TextField in the placeholder. Use descriptiveText\\\\nfor important instructions.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rows\\": {
                        \\"name\\": \\"rows\\",
                        \\"type\\": \\"number | undefined\\",
                        \\"description\\": \\"Controls height based on number of rows of text to display.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | number | readonly string[] | undefined\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"\\\\\\"quiet\\\\\\" | undefined\\",
                        \\"description\\": \\"Variants\\",
                        \\"category\\": \\"BaseTextAreaProps\\",
                        \\"isOptional\\": true
                    },
                    \\"resize\\": {
                        \\"name\\": \\"resize\\",
                        \\"type\\": \\"Property.Resize | undefined\\",
                        \\"description\\": \\"Defines if (and how) an element is resizable by the user\\",
                        \\"category\\": \\"TextAreaStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"TextField\\": {
        \\"TextField\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"outerEndComponent\\": {
                        \\"name\\": \\"outerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show after input\\",
                        \\"category\\": \\"TextField\\",
                        \\"isOptional\\": true
                    },
                    \\"outerStartComponent\\": {
                        \\"name\\": \\"outerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Component(s) to show before input\\",
                        \\"category\\": \\"TextField\\",
                        \\"isOptional\\": true
                    },
                    \\"innerStartComponent\\": {
                        \\"name\\": \\"innerStartComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at start\\",
                        \\"category\\": \\"TextField\\",
                        \\"isOptional\\": true
                    },
                    \\"innerEndComponent\\": {
                        \\"name\\": \\"innerEndComponent\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"FieldGroupIconButton component to show inside of input at end\\",
                        \\"category\\": \\"TextField\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"React.HTMLInputTypeAttribute\\",
                        \\"description\\": \\"Input field type.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"descriptiveText\\": {
                        \\"name\\": \\"descriptiveText\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Provides additional information needed to fill field\\\\n    (e.g. password requirements, etc.)\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"errorMessage\\": {
                        \\"name\\": \\"errorMessage\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"When defined and \`hasError\` is true, show error message\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"label\\": {
                        \\"name\\": \\"label\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Label text for field (required)\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": false
                    },
                    \\"labelHidden\\": {
                        \\"name\\": \\"labelHidden\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Visually hide label (not recommended in most cases) Default: false\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"inputStyles\\": {
                        \\"name\\": \\"inputStyles\\",
                        \\"type\\": \\"BaseStyleProps\\",
                        \\"description\\": \\"Style props to be applied to the input element\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Determines whether field should be disabled. Default: false\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"autoComplete\\": {
                        \\"name\\": \\"autoComplete\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Specifies permissions for browser UA to autocomplete field. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"checked\\": {
                        \\"name\\": \\"checked\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"If checked is provided, this will be a controlled checkbox or radio.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultChecked\\": {
                        \\"name\\": \\"defaultChecked\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Use this to initialize an uncontrolled checkbox or radio.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultValue\\": {
                        \\"name\\": \\"defaultValue\\",
                        \\"type\\": \\"React.AllHTMLAttributes<'input'>['defaultValue']\\",
                        \\"description\\": \\"Use this to provide a default value for an uncontrolled field.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"hasError\\": {
                        \\"name\\": \\"hasError\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Indicates that Field is in error state.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"enterKeyHint\\": {
                        \\"name\\": \\"enterKeyHint\\",
                        \\"type\\": \\"EnterKeyHint\\",
                        \\"description\\": \\"Defines what action label (or icon) to present for the enter key on virtual keyboards. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint)\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"inputMode\\": {
                        \\"name\\": \\"inputMode\\",
                        \\"type\\": \\"InputMode\\",
                        \\"description\\": \\"Provides hint for virtual keyboard shown See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode) Default: @default \\\\\\"text\\\\\\"\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"isReadOnly\\": {
                        \\"name\\": \\"isReadOnly\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Determines whether field should be immutable. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) Default: false\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"isRequired\\": {
                        \\"name\\": \\"isRequired\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Whether field should be marked required.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"name\\": {
                        \\"name\\": \\"name\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Name of the field. Submitted with the form as part of a name/value pair.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"placeholder\\": {
                        \\"name\\": \\"placeholder\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Placeholder text shown when field is empty Accessibility tip: avoid putting important instructions for filling out the TextField in the placeholder. Use descriptiveText for important instructions.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"InputSizes\\",
                        \\"description\\": \\"Changes the font-size, padding, and height of the field.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"React.AllHTMLAttributes<'input'>['value']\\",
                        \\"description\\": \\"If value is provided, this will be a controlled field.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"FieldVariations\\",
                        \\"description\\": \\"Variants.\\",
                        \\"category\\": \\"Input\\",
                        \\"isOptional\\": true
                    },
                    \\"as\\": {
                        \\"name\\": \\"as\\",
                        \\"type\\": \\"React.ElementType\\",
                        \\"description\\": \\"Changes the underlying rendered HTML element\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"BaseTextFieldProps\\": {
                        \\"name\\": \\"BaseTextFieldProps\\",
                        \\"type\\": \\"extends TextFieldOptions, BaseInputProps\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"TextField\\",
                        \\"isOptional\\": true
                    },
                    \\"resize\\": {
                        \\"name\\": \\"resize\\",
                        \\"type\\": \\"Property.Resize\\",
                        \\"description\\": \\"Defines if (and how) an element is resizable by the user\\",
                        \\"category\\": \\"TextArea\\",
                        \\"isOptional\\": true
                    },
                    \\"maxLength\\": {
                        \\"name\\": \\"maxLength\\",
                        \\"type\\": \\"number\\",
                        \\"description\\": \\"Text contents maximum length.\\",
                        \\"category\\": \\"TextArea\\",
                        \\"isOptional\\": true
                    },
                    \\"rows\\": {
                        \\"name\\": \\"rows\\",
                        \\"type\\": \\"number\\",
                        \\"description\\": \\"Controls height based on number of rows of text to display.\\",
                        \\"category\\": \\"TextArea\\",
                        \\"isOptional\\": true
                    },
                    \\"BaseFieldClearButtonProps\\": {
                        \\"name\\": \\"BaseFieldClearButtonProps\\",
                        \\"type\\": \\"extends Partial<BaseFieldGroupIconButtonProps>\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"BaseFieldDescriptionProps\\": {
                        \\"name\\": \\"BaseFieldDescriptionProps\\",
                        \\"type\\": \\"extends BaseTextProps,\\\\n    Pick<BaseFieldProps, 'descriptiveText' | 'labelHidden'>\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    },
                    \\"BaseFieldErrorMessageProps\\": {
                        \\"name\\": \\"BaseFieldErrorMessageProps\\",
                        \\"type\\": \\"extends BaseTextProps,\\\\n    Pick<BaseFieldProps, 'errorMessage'>,\\\\n    Pick<BaseInputProps, 'hasError'>\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Field\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"ToggleButton\\": {
        \\"ToggleButton\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Controls the selected state of the ToggleButton\\",
                        \\"category\\": \\"BaseToggleButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isPressed\\": {
                        \\"name\\": \\"isPressed\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Controls the \`isPressed\` state of the ToggleButton when using it as a controlled component\\",
                        \\"category\\": \\"BaseToggleButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"defaultPressed\\": {
                        \\"name\\": \\"defaultPressed\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"When \`true\`, sets the \`isPressed\` state of the ToggleButton to \`true\` on initial render\\",
                        \\"category\\": \\"BaseToggleButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"((value: string | undefined) => void) | undefined\\",
                        \\"description\\": \\"Handles changes to the current value when using the ToggleButton as a controlled component\\",
                        \\"category\\": \\"BaseToggleButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will be disabled.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isFullWidth\\": {
                        \\"name\\": \\"isFullWidth\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will take up the full width of its container.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isLoading\\": {
                        \\"name\\": \\"isLoading\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"If \`true\`, the button will show a spinner.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"loadingText\\": {
                        \\"name\\": \\"loadingText\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"The label to show in the button when \`loading\` is true\\\\nIf no text is passed, it only shows the spinner\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"onClick\\": {
                        \\"name\\": \\"onClick\\",
                        \\"type\\": \\"React.MouseEventHandler<HTMLButtonElement> | undefined\\",
                        \\"description\\": \\"Button click event handler\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the size of the button. Default: \\\\\\"medium\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"type\\": {
                        \\"name\\": \\"type\\",
                        \\"type\\": \\"'button' | 'reset' | 'submit'\\",
                        \\"description\\": \\"Changes the button type Default: \\\\\\"button\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'link'\\\\n  | 'menu'\\\\n  | 'warning'\\\\n  | 'destructive'\\",
                        \\"description\\": \\"Changes the visual weight of the button.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ],
        \\"ToggleButtonGroup\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Accepts any number of ToggleButton components\\",
                        \\"category\\": \\"BaseToggleButtonGroupProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isExclusive\\": {
                        \\"name\\": \\"isExclusive\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"When \`true\`, only allows one ToggleButton to be pressed at a time within a ToggleButtonGroup\\",
                        \\"category\\": \\"BaseToggleButtonGroupProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isSelectionRequired\\": {
                        \\"name\\": \\"isSelectionRequired\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Used when at least one ToggleButton needs to be currently pressed\\",
                        \\"category\\": \\"BaseToggleButtonGroupProps\\",
                        \\"isOptional\\": true
                    },
                    \\"value\\": {
                        \\"name\\": \\"value\\",
                        \\"type\\": \\"string | string[]\\",
                        \\"description\\": \\"Controls which of its ToggleButton children are currently selected\\",
                        \\"category\\": \\"BaseToggleButtonGroupProps\\",
                        \\"isOptional\\": false
                    },
                    \\"onChange\\": {
                        \\"name\\": \\"onChange\\",
                        \\"type\\": \\"(value: string | (string | undefined)[] | undefined) => void\\",
                        \\"description\\": \\"Handles changes to the current value when using the ToggleButtonGroup as a controlled component\\",
                        \\"category\\": \\"BaseToggleButtonGroupProps\\",
                        \\"isOptional\\": false
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"size\\": {
                        \\"name\\": \\"size\\",
                        \\"type\\": \\"'small' | 'large'\\",
                        \\"description\\": \\"Changes the size of the button. Default: \\\\\\"medium\\\\\\"\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    },
                    \\"variation\\": {
                        \\"name\\": \\"variation\\",
                        \\"type\\": \\"| 'primary'\\\\n  | 'link'\\\\n  | 'menu'\\\\n  | 'warning'\\\\n  | 'destructive'\\",
                        \\"description\\": \\"Changes the visual weight of the button.\\",
                        \\"category\\": \\"BaseButtonProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems> | undefined\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent> | undefined\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent> | undefined\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap<0 | (string & {})>>>> | undefined\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"CSSLayoutStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"direction\\": {
                        \\"name\\": \\"direction\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexDirection> | undefined\\",
                        \\"description\\": \\"Sets how flex items are placed in the flex container defining the main axis\\\\nand the direction (normal or reversed). (maps to flex-direction CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"wrap\\": {
                        \\"name\\": \\"wrap\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexWrap> | undefined\\",
                        \\"description\\": \\"The flexWrap property is set on containers and it controls what happens when\\\\nchildren overflow the size of the container along the main axis. By default,\\\\nchildren are forced into a single line (which can shrink elements). If\\\\nwrapping is allowed, items are wrapped into multiple lines along the main\\\\naxis if needed.\\\\n(maps to flex-wrap CSS property)\\",
                        \\"category\\": \\"FlexContainerStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"View\\": {
        \\"View\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\n    https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"View\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\n    This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"View\\",
                        \\"isOptional\\": true
                    },
                    \\"as\\": {
                        \\"name\\": \\"as\\",
                        \\"type\\": \\"React.ElementType\\",
                        \\"description\\": \\"Changes the underlying rendered HTML element\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"ForwardRefPrimitive\\": {
                        \\"name\\": \\"ForwardRefPrimitive\\",
                        \\"type\\": \\"extends React.ForwardRefExoticComponent<Props>\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"View\\",
                        \\"isOptional\\": true
                    },
                    \\"ariaLabel\\": {
                        \\"name\\": \\"ariaLabel\\",
                        \\"type\\": \\"AriaAttributes['aria-label']\\",
                        \\"description\\": \\"Defines a string value that labels an interactive element for accessibility\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"ariaValuetext\\": {
                        \\"name\\": \\"ariaValuetext\\",
                        \\"type\\": \\"AriaAttributes['aria-valuetext']\\",
                        \\"description\\": \\"Defines the human readable text alternative of \`aria-valuenow\` for a range widget\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"role\\": {
                        \\"name\\": \\"role\\",
                        \\"type\\": \\"React.AriaRole\\",
                        \\"description\\": \\"Provides semantic meaning to content, allowing screen readers to support interaction in a way that is consistent with user expectations\\",
                        \\"category\\": \\"Base\\",
                        \\"isOptional\\": true
                    },
                    \\"base\\": {
                        \\"name\\": \\"base\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"small\\": {
                        \\"name\\": \\"small\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"medium\\": {
                        \\"name\\": \\"medium\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"large\\": {
                        \\"name\\": \\"large\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"xl\\": {
                        \\"name\\": \\"xl\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"xxl\\": {
                        \\"name\\": \\"xxl\\",
                        \\"type\\": \\"PropertyType\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"alignSelf\\": {
                        \\"name\\": \\"alignSelf\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.AlignSelf>>\\",
                        \\"description\\": \\"Overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. See: @see[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"backgroundColor\\": {
                        \\"name\\": \\"backgroundColor\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    ColorKeys<StyleToken<Property.BackgroundColor>>\\\\n  >\\",
                        \\"description\\": \\"Sets the background color of an element. See: @see[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"backgroundImage\\": {
                        \\"name\\": \\"backgroundImage\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.BackgroundImage>>\\",
                        \\"description\\": \\"Sets one or more background images on an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"border\\": {
                        \\"name\\": \\"border\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.Border>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets an element's border-width, border-style, and border-color. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"borderColor\\": {
                        \\"name\\": \\"borderColor\\",
                        \\"type\\": \\"ResponsiveStyle<ColorKeys<StyleToken<Property.BorderColor>>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets an element's border-color. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"borderWidth\\": {
                        \\"name\\": \\"borderWidth\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    BorderWidthKeys<StyleToken<Property.BorderWidth>>\\\\n  >\\",
                        \\"description\\": \\"Shorthand CSS property that sets an element's border-width. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"borderStyle\\": {
                        \\"name\\": \\"borderStyle\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.BorderStyle>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets an element's border-style. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"borderRadius\\": {
                        \\"name\\": \\"borderRadius\\",
                        \\"type\\": \\"ResponsiveStyle<RadiiKeys<StyleToken<Property.BorderRadius>>>\\",
                        \\"description\\": \\"Rounds the corners of an element's outer border edge.\\\\n    You can set a single radius to make circular corners, or two radii to make elliptical corners. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"bottom\\": {
                        \\"name\\": \\"bottom\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Bottom>>>\\",
                        \\"description\\": \\"Participates in setting the vertical position of a positioned element.\\\\n    It has no effect on non-positioned elements. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/bottom)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"boxShadow\\": {
                        \\"name\\": \\"boxShadow\\",
                        \\"type\\": \\"ResponsiveStyle<BoxShadowKeys<StyleToken<Property.BoxShadow>>>\\",
                        \\"description\\": \\"Adds shadow effects around an element's frame. You can set multiple effects separated by commas.\\\\n    A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"color\\": {
                        \\"name\\": \\"color\\",
                        \\"type\\": \\"ResponsiveStyle<ColorKeys<StyleToken<Property.Color>>>\\",
                        \\"description\\": \\"Sets the foreground color value of an element's text and text decorations, and sets the \`currentcolor\` value.\\\\n    \`currentcolor\` may be used as an indirect value on other properties and is the default for other color properties, such as border-color. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"display\\": {
                        \\"name\\": \\"display\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.Display>>\\",
                        \\"description\\": \\"Sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"fontFamily\\": {
                        \\"name\\": \\"fontFamily\\",
                        \\"type\\": \\"ResponsiveStyle<FontFamilyKeys<StyleToken<Property.FontFamily>>>\\",
                        \\"description\\": \\"Specifies a prioritized list of one or more font family names and/or generic family names for the selected element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"fontSize\\": {
                        \\"name\\": \\"fontSize\\",
                        \\"type\\": \\"ResponsiveStyle<FontSizeKeys<StyleToken<Property.FontSize>>>\\",
                        \\"description\\": \\"Sets the size of the font. Changing the font size also updates the sizes of the font size-relative <length> units, such as em, ex, and so forth. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"fontStyle\\": {
                        \\"name\\": \\"fontStyle\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.FontStyle>>\\",
                        \\"description\\": \\"Sets whether a font should be styled with a normal, italic, or oblique face from its font-family. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"fontWeight\\": {
                        \\"name\\": \\"fontWeight\\",
                        \\"type\\": \\"ResponsiveStyle<FontWeightKeys<StyleToken<Property.FontWeight>>>\\",
                        \\"description\\": \\"Sets the weight (or boldness) of the font. The weights available depend on the font-family that is currently set. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"height\\": {
                        \\"name\\": \\"height\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Height>>>\\",
                        \\"description\\": \\"specifies the height of an element. By default, the property defines the height of the content area.\\\\n    If box-sizing is set to border-box, however, it instead determines the height of the border area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"left\\": {
                        \\"name\\": \\"left\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Left>>>\\",
                        \\"description\\": \\"Participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/left)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"letterSpacing\\": {
                        \\"name\\": \\"letterSpacing\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.LetterSpacing>>\\\\n  >\\",
                        \\"description\\": \\"Sets the horizontal spacing behavior between text characters.\\\\n    This value is added to the natural spacing between characters while rendering the text. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"lineHeight\\": {
                        \\"name\\": \\"lineHeight\\",
                        \\"type\\": \\"ResponsiveStyle<LineHeightKeys<StyleToken<Property.LineHeight>>>\\",
                        \\"description\\": \\"Sets the height of a line box. It's commonly used to set the distance between lines of text. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"margin\\": {
                        \\"name\\": \\"margin\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Margin>>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets the margin area on all four sides of an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginBlock\\": {
                        \\"name\\": \\"marginBlock\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginBlock>>>\\",
                        \\"description\\": \\"Shorthand CSS property that defines the logical block start and end margins of an element,\\\\n    which maps to physical margins depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginBlockEnd\\": {
                        \\"name\\": \\"marginBlockEnd\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.MarginBlockEnd>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical block end margin of an element,\\\\n    which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginBlockStart\\": {
                        \\"name\\": \\"marginBlockStart\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.MarginBlockStart>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical block start margin of an element,\\\\n    which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-start)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginBottom\\": {
                        \\"name\\": \\"marginBottom\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginBottom>>>\\",
                        \\"description\\": \\"Sets the margin area on the bottom of an element.\\\\n    A positive value places it farther from its neighbors, while a negative value places it closer. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginInline\\": {
                        \\"name\\": \\"marginInline\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginInline>>>\\",
                        \\"description\\": \\"Shorthand CSS property that defines both the logical inline start and end margins of an element,\\\\n    which maps to physical margins depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginInlineEnd\\": {
                        \\"name\\": \\"marginInlineEnd\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.MarginInlineEnd>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical inline end margin of an element,\\\\n    which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginInlineStart\\": {
                        \\"name\\": \\"marginInlineStart\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.MarginInlineStart>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical inline start margin of an element,\\\\n    which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginLeft\\": {
                        \\"name\\": \\"marginLeft\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginLeft>>>\\",
                        \\"description\\": \\"Sets the margin area on the left side of an element.\\\\n    A positive value places it farther from its neighbors, while a negative value places it closer. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginRight\\": {
                        \\"name\\": \\"marginRight\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginRight>>>\\",
                        \\"description\\": \\"Sets the margin area on the right side of an element.\\\\n    A positive value places it farther from its neighbors, while a negative value places it closer. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"marginTop\\": {
                        \\"name\\": \\"marginTop\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MarginTop>>>\\",
                        \\"description\\": \\"Sets the margin area on the top of an element.\\\\n    A positive value places it farther from its neighbors, while a negative value places it closer. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"maxHeight\\": {
                        \\"name\\": \\"maxHeight\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MaxHeight>>>\\",
                        \\"description\\": \\"Sets the maximum height of an element.\\\\n    It prevents the used value of the height property from becoming larger than the value specified for max-height. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"maxWidth\\": {
                        \\"name\\": \\"maxWidth\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MaxWidth>>>\\",
                        \\"description\\": \\"Sets the maximum width of an element.\\\\n    It prevents the used value of the width property from becoming larger than the value specified by max-width. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"minHeight\\": {
                        \\"name\\": \\"minHeight\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MinHeight>>>\\",
                        \\"description\\": \\"Sets the minimum height of an element.\\\\n    It prevents the used value of the height property from becoming smaller than the value specified for min-height. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/min-height)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"minWidth\\": {
                        \\"name\\": \\"minWidth\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.MinWidth>>>\\",
                        \\"description\\": \\"Sets the minimum width of an element.\\\\n    It prevents the used value of the width property from becoming smaller than the value specified for min-width. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"opacity\\": {
                        \\"name\\": \\"opacity\\",
                        \\"type\\": \\"ResponsiveStyle<OpacityKeys<StyleToken<Property.Opacity>>>\\",
                        \\"description\\": \\"Sets the opacity of an element.\\\\n    Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"overflow\\": {
                        \\"name\\": \\"overflow\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.Overflow>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets the desired behavior for an element's overflow\\\\n    — i.e. when an element's content is too big to fit in its block formatting context — in both directions. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"padding\\": {
                        \\"name\\": \\"padding\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Padding>>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets the padding area on all four sides of an element at once. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingBlock\\": {
                        \\"name\\": \\"paddingBlock\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.PaddingBlock>>>\\",
                        \\"description\\": \\"Shorthand CSS property that defines the logical block start and end padding of an element,\\\\n    which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingBlockEnd\\": {
                        \\"name\\": \\"paddingBlockEnd\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingBlockEnd>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical block end padding of an element,\\\\n    which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingBlockStart\\": {
                        \\"name\\": \\"paddingBlockStart\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingBlockStart>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical block start padding of an element,\\\\n    which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-start)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingBottom\\": {
                        \\"name\\": \\"paddingBottom\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingBottom>>\\\\n  >\\",
                        \\"description\\": \\"Sets the height of the padding area on the bottom of an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingInline\\": {
                        \\"name\\": \\"paddingInline\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingInline>>\\\\n  >\\",
                        \\"description\\": \\"Shorthand CSS property that defines the logical inline start and end padding of an element,\\\\n    which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingInlineEnd\\": {
                        \\"name\\": \\"paddingInlineEnd\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingInlineEnd>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical inline end padding of an element,\\\\n    which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingInlineStart\\": {
                        \\"name\\": \\"paddingInlineStart\\",
                        \\"type\\": \\"ResponsiveStyle<\\\\n    SpaceKeys<StyleToken<Property.PaddingInlineStart>>\\\\n  >\\",
                        \\"description\\": \\"Defines the logical inline start padding of an element,\\\\n    which maps to a physical padding depending on the element's writing mode, directionality, and text orientation. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingLeft\\": {
                        \\"name\\": \\"paddingLeft\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.PaddingLeft>>>\\",
                        \\"description\\": \\"Sets the width of the padding area to the left of an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingRight\\": {
                        \\"name\\": \\"paddingRight\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.PaddingRight>>>\\",
                        \\"description\\": \\"Sets the width of the padding area on the right of an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"paddingTop\\": {
                        \\"name\\": \\"paddingTop\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.PaddingTop>>>\\",
                        \\"description\\": \\"Sets the height of the padding area on the top of an element. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"position\\": {
                        \\"name\\": \\"position\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.Position>>\\",
                        \\"description\\": \\"Sets how an element is positioned in a document.\\\\n    The top, right, bottom, and left properties determine the final location of positioned elements. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/position)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"right\\": {
                        \\"name\\": \\"right\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Right>>>\\",
                        \\"description\\": \\"Participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/right)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"textAlign\\": {
                        \\"name\\": \\"textAlign\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.TextAlign>>\\",
                        \\"description\\": \\"Sets the horizontal alignment of the content inside a block element or table-cell box.\\\\n    This means it works like vertical-align but in the horizontal direction. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"textDecoration\\": {
                        \\"name\\": \\"textDecoration\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.TextDecoration>>\\",
                        \\"description\\": \\"Shorthand CSS property that sets the appearance of decorative lines on text.\\\\n    It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"textTransform\\": {
                        \\"name\\": \\"textTransform\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.TextTransform>>\\",
                        \\"description\\": \\"Specifies how to capitalize an element's text. It can be used to make text\\\\n    appear in all-uppercase or all-lowercase, or with each word capitalized. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"top\\": {
                        \\"name\\": \\"top\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Top>>>\\",
                        \\"description\\": \\"Participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/top)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"transform\\": {
                        \\"name\\": \\"transform\\",
                        \\"type\\": \\"ResponsiveStyle<TransformKeys<StyleToken<Property.Transform>>>\\",
                        \\"description\\": \\"Lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"transformOrigin\\": {
                        \\"name\\": \\"transformOrigin\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.TransformOrigin>>\\",
                        \\"description\\": \\"Sets the origin for an element's transformations. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"width\\": {
                        \\"name\\": \\"width\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Width>>>\\",
                        \\"description\\": \\"Sets an element's width. By default, it sets the width of the content area,\\\\n    but if box-sizing is set to border-box, it sets the width of the border area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/width)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"whiteSpace\\": {
                        \\"name\\": \\"whiteSpace\\",
                        \\"type\\": \\"ResponsiveStyle<StyleToken<Property.WhiteSpace>>\\",
                        \\"description\\": \\"Sets how white space inside an element is handled. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"alignItems\\": {
                        \\"name\\": \\"alignItems\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignItems>\\",
                        \\"description\\": \\"Sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"alignContent\\": {
                        \\"name\\": \\"alignContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.AlignContent>\\",
                        \\"description\\": \\"Sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"justifyContent\\": {
                        \\"name\\": \\"justifyContent\\",
                        \\"type\\": \\"ResponsiveStyle<Property.JustifyContent>\\",
                        \\"description\\": \\"Defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"gap\\": {
                        \\"name\\": \\"gap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.Gap>>>\\",
                        \\"description\\": \\"Controls the spacing between child components. Shorthand for rowGap and columnGap. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gap)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"columnGap\\": {
                        \\"name\\": \\"columnGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.GridColumnGap>>>\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child columns See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"rowGap\\": {
                        \\"name\\": \\"rowGap\\",
                        \\"type\\": \\"ResponsiveStyle<SpaceKeys<StyleToken<Property.RowGap>>>\\",
                        \\"description\\": \\"Controls the spacing between Flex/Grid child rows See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap)\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    },
                    \\"AllStyleProps\\": {
                        \\"name\\": \\"AllStyleProps\\",
                        \\"type\\": \\"extends BaseStyleProps,\\\\n    ImageStyleProps,\\\\n    FlexContainerStyleProps,\\\\n    GridContainerStyleProps,\\\\n    TextAreaStyleProps\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"Style\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    },
    \\"VisuallyHidden\\": {
        \\"VisuallyHidden\\": [
            {
                \\"Main\\": {
                    \\"id\\": {
                        \\"name\\": \\"id\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Unique identifier\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"children\\": {
                        \\"name\\": \\"children\\",
                        \\"type\\": \\"React.ReactNode\\",
                        \\"description\\": \\"Children to be rendered inside the component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"className\\": {
                        \\"name\\": \\"className\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Additional CSS class name for component\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"testId\\": {
                        \\"name\\": \\"testId\\",
                        \\"type\\": \\"string | undefined\\",
                        \\"description\\": \\"Used to provide a \`data-testid\` attribute for testing purposes\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"inert\\": {
                        \\"name\\": \\"inert\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Support for the HTML \`inert\` attribute\\\\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert\\",
                        \\"category\\": \\"BaseComponentProps\\",
                        \\"isOptional\\": true
                    },
                    \\"isDisabled\\": {
                        \\"name\\": \\"isDisabled\\",
                        \\"type\\": \\"boolean | undefined\\",
                        \\"description\\": \\"Sets the Boolean \`disabled\` HTML attribute, which, when present, makes the element not mutable, focusable, or even submitted with the form\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    },
                    \\"style\\": {
                        \\"name\\": \\"style\\",
                        \\"type\\": \\"React.CSSProperties | undefined\\",
                        \\"description\\": \\"Accepts a JavaScript object with camelCased properties rather than a CSS string.\\\\nThis is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes. See: [React docs](https://reactjs.org/docs/dom-elements.html#style)\\",
                        \\"category\\": \\"BaseViewProps\\",
                        \\"isOptional\\": true
                    }
                }
            },
            {
                \\"Layout\\": {
                    \\"flex\\": {
                        \\"name\\": \\"flex\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Flex<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Shorthand for flex grow / shrink / basis\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"order\\": {
                        \\"name\\": \\"order\\",
                        \\"type\\": \\"ResponsiveStyle<Property.Order> | undefined\\",
                        \\"description\\": \\"Sets the order to lay out an item in a flex or grid container.\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"grow\\": {
                        \\"name\\": \\"grow\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexGrow> | undefined\\",
                        \\"description\\": \\"Ability for flex item to grow\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"shrink\\": {
                        \\"name\\": \\"shrink\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexShrink> | undefined\\",
                        \\"description\\": \\"Ability for flex item to shrink\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"basis\\": {
                        \\"name\\": \\"basis\\",
                        \\"type\\": \\"ResponsiveStyle<Property.FlexBasis<0 | (string & {})>> | undefined\\",
                        \\"description\\": \\"Default size of element before remaining space is distributed\\",
                        \\"category\\": \\"FlexItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"area\\": {
                        \\"name\\": \\"area\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridArea> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"column\\": {
                        \\"name\\": \\"column\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumn> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnEnd\\": {
                        \\"name\\": \\"columnEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnSpan\\": {
                        \\"name\\": \\"columnSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"Makes it possible for an element to span across all columns when its value is set to all. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/column-span)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"columnStart\\": {
                        \\"name\\": \\"columnStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridColumnStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"row\\": {
                        \\"name\\": \\"row\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRow> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's size and location within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowEnd\\": {
                        \\"name\\": \\"rowEnd\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowEnd> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowSpan\\": {
                        \\"name\\": \\"rowSpan\\",
                        \\"type\\": \\"ResponsiveStyle<GridSpanType> | undefined\\",
                        \\"description\\": \\"\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    },
                    \\"rowStart\\": {
                        \\"name\\": \\"rowStart\\",
                        \\"type\\": \\"ResponsiveStyle<Property.GridRowStart> | undefined\\",
                        \\"description\\": \\"Specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area. See: [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start)\\",
                        \\"category\\": \\"GridItemStyleProps\\",
                        \\"isOptional\\": true
                    }
                }
            }
        ]
    }
}"
`;
