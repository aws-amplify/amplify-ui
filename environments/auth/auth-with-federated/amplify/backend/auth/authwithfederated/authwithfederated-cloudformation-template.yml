AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  env:
    Type: String
  authRoleArn:
    Type: String
  unauthRoleArn:
    Type: String
  identityPoolName:
    Type: String
  allowUnauthenticatedIdentities:
    Type: String
  resourceNameTruncated:
    Type: String
  userPoolName:
    Type: String
  autoVerifiedAttributes:
    Type: CommaDelimitedList
  mfaConfiguration:
    Type: String
  mfaTypes:
    Type: CommaDelimitedList
  smsAuthenticationMessage:
    Type: String
  smsVerificationMessage:
    Type: String
  emailVerificationSubject:
    Type: String
  emailVerificationMessage:
    Type: String
  defaultPasswordPolicy:
    Type: String
  passwordPolicyMinLength:
    Type: Number
  passwordPolicyCharacters:
    Type: CommaDelimitedList
  requiredAttributes:
    Type: CommaDelimitedList
  aliasAttributes:
    Type: CommaDelimitedList
  userpoolClientGenerateSecret:
    Type: String
  userpoolClientRefreshTokenValidity:
    Type: Number
  userpoolClientWriteAttributes:
    Type: CommaDelimitedList
  userpoolClientReadAttributes:
    Type: CommaDelimitedList
  userpoolClientLambdaRole:
    Type: String
  userpoolClientSetAttributes:
    Type: String
  sharedId:
    Type: String
  resourceName:
    Type: String
  authSelections:
    Type: String
  serviceName:
    Type: String
  usernameAttributes:
    Type: CommaDelimitedList
  useDefault:
    Type: String
  userPoolGroups:
    Type: String
  userPoolGroupList:
    Type: CommaDelimitedList
  adminQueries:
    Type: String
  thirdPartyAuth:
    Type: String
  authProviders:
    Type: CommaDelimitedList
  hostedUI:
    Type: String
  hostedUIDomainName:
    Type: String
  authProvidersUserPool:
    Type: CommaDelimitedList
  hostedUIProviderMeta:
    Type: String
  oAuthMetadata:
    Type: String
  usernameCaseSensitive:
    Type: String
  dependsOn:
    Type: CommaDelimitedList
  hostedUIProviderCreds:
    Type: String
Conditions:
  ShouldNotCreateEnvResources:
    Fn::Equals:
      - Ref: env
      - NONE
  ShouldOutputAppClientSecrets:
    Fn::Equals:
      - Ref: userpoolClientGenerateSecret
      - true
Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - authwiaec7314d_sns-role
          - Fn::Join:
              - ''
              - - sns
                - aec7314d
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - '-'
                        - Ref: AWS::StackName
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: authwiaec7314d_role_external_id
      Policies:
        - PolicyName: authwiaec7314d-sns-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
  UserPool:
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userPoolName
          - Fn::Join:
              - ''
              - - Ref: userPoolName
                - '-'
                - Ref: env
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - Name: email
          Required: true
          Mutable: true
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage:
        Ref: emailVerificationMessage
      EmailVerificationSubject:
        Ref: emailVerificationSubject
      Policies:
        PasswordPolicy:
          MinimumLength:
            Ref: passwordPolicyMinLength
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        Ref: usernameAttributes
      MfaConfiguration:
        Ref: mfaConfiguration
      SmsVerificationMessage:
        Ref: smsVerificationMessage
      SmsAuthenticationMessage:
        Ref: smsAuthenticationMessage
      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt:
            - SNSRole
            - Arn
        ExternalId: authwiaec7314d_role_external_id
  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: authwiaec7314d_app_clientWeb
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
    DependsOn: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: authwiaec7314d_app_client
      GenerateSecret:
        Ref: userpoolClientGenerateSecret
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
    DependsOn: UserPool
  UserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userpoolClientLambdaRole
          - Fn::Join:
              - ''
              - - upClientLambdaRole
                - aec7314d
                - Fn::Select:
                    - 3
                    - Fn::Split:
                        - '-'
                        - Ref: AWS::StackName
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn: UserPoolClient
  UserPoolClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - ' if (event.RequestType == ''Delete'') { '
              - '   response.send(event, context, response.SUCCESS, {})'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '   const params = {'
              - '     ClientId: event.ResourceProperties.clientId,'
              - '     UserPoolId: event.ResourceProperties.userpoolId'
              - '   };'
              - '   identity.describeUserPoolClient(params).promise()'
              - '     .then((res) => {'
              - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'
              - '     })'
              - '     .catch((err) => {'
              - '       response.send(event, context, response.FAILED, {err});'
              - '     });'
              - ' }'
              - '};'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  UserPoolClientLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: authwiaec7314d_userpoolclient_lambda_iam_policy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: authwiaec7314d_userpoolclient_lambda_log_policy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: UserPoolClientLambda
    DependsOn: UserPoolClientLambdaPolicy
  UserPoolClientInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - UserPoolClientLambda
          - Arn
      clientId:
        Ref: UserPoolClient
      userpoolId:
        Ref: UserPool
    DependsOn: UserPoolClientLogPolicy
  HostedUICustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - ' const userPoolId = event.ResourceProperties.userPoolId;'
              - ' const inputDomainName = event.ResourceProperties.hostedUIDomainName;'
              - ' let deleteUserPoolDomain = (domainName) => {'
              - '   let params = { Domain: domainName, UserPoolId: userPoolId };'
              - '   return identity.deleteUserPoolDomain(params).promise();'
              - ' };'
              - ' if (event.RequestType == ''Delete'') {'
              - '   deleteUserPoolDomain(inputDomainName)'
              - '   .then(() => {response.send(event, context, response.SUCCESS, {})})'
              - '   .catch((err) => { console.log(err); response.send(event, context, response.FAILED, {err}) });'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '  let checkDomainAvailability = (domainName) => {'
              - '  let params = { Domain: domainName };'
              - '  return identity.describeUserPoolDomain(params).promise().then((res) => {'
              - '   if (res.DomainDescription && res.DomainDescription.UserPool) {'
              - '    return false;'
              - '   }'
              - '   return true;'
              - '   }).catch((err) => { return false; });'
              - ' };'
              - ' let createUserPoolDomain = (domainName) => {'
              - '  let params = { Domain: domainName, UserPoolId: userPoolId };'
              - '   return identity.createUserPoolDomain(params).promise();'
              - ' };'
              - ' identity.describeUserPool({UserPoolId: userPoolId }).promise().then((result) => {'
              - '  if (inputDomainName) {'
              - '   if (result.UserPool.Domain === inputDomainName) {'
              - '    return;'
              - '    } else {'
              - '       if (!result.UserPool.Domain) {'
              - '         return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {'
              - '           if (isDomainAvailable) {'
              - '             return createUserPoolDomain(inputDomainName);'
              - '           } else {'
              - '               throw new Error(''Domain not available'');'
              - '           }'
              - '         });'
              - '       } else {'
              - '           return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {'
              - '             if (isDomainAvailable) {'
              - '               return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));'
              - '             } else {'
              - '                 throw new Error(''Domain not available'');'
              - '             }'
              - '           });'
              - '       }'
              - '     }'
              - '   } else {'
              - '       if (result.UserPool.Domain) {'
              - '         return deleteUserPoolDomain(result.UserPool.Domain);'
              - '       }'
              - '   }'
              - ' }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
              - ' console.log(err);  response.send(event, context, response.FAILED, {err});'
              - ' });'
              - '}}'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  HostedUICustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUI
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DescribeUserPool
              - cognito-idp:DeleteUserPoolDomain
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolDomain
            Resource: '*'
    DependsOn: HostedUICustomResource
  HostedUICustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUILogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: HostedUICustomResource
    DependsOn: HostedUICustomResourcePolicy
  HostedUICustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - HostedUICustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIDomainName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: hostedUIDomainName
          - Fn::Join:
              - '-'
              - - Ref: hostedUIDomainName
                - Ref: env
    DependsOn: HostedUICustomResourceLogPolicy
  HostedUIProvidersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - try{
              - ' const userPoolId = event.ResourceProperties.userPoolId;'
              - ' let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);'
              - ' let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);'
              - ' if(hostedUIProviderCreds.length === 0) {'
              - '  response.send(event, context, response.SUCCESS, {});'
              - ' }'
              - ' if (event.RequestType == ''Delete'') {'
              - '  response.send(event, context, response.SUCCESS, {});'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '  let getRequestParams = (providerName) => {'
              - '   let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);'
              - '   let providerMeta =  hostedUIProviderMeta[providerMetaIndex];'
              - '   let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);'
              - '   let providerCreds = hostedUIProviderCreds[providerCredsIndex];'
              - '   let requestParams = {'
              - '    ProviderName: providerMeta.ProviderName,'
              - '    UserPoolId: userPoolId,'
              - '    AttributeMapping: providerMeta.AttributeMapping,'
              - '   };'
              - '   if (providerMeta.ProviderName === ''SignInWithApple'') {'
              - '     if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {'
              - '      requestParams.ProviderDetails = {'
              - '       ''client_id'': providerCreds.client_id,'
              - '       ''team_id'': providerCreds.team_id,'
              - '       ''key_id'': providerCreds.key_id,'
              - '       ''private_key'': providerCreds.private_key,'
              - '       ''authorize_scopes'': providerMeta.authorize_scopes,'
              - '      };'
              - '     } else {'
              - '       requestParams = null;'
              - '     }'
              - '   } else {'
              - '    requestParams.ProviderDetails = {'
              - '     ''client_id'': providerCreds.client_id,'
              - '     ''client_secret'': providerCreds.client_secret,'
              - '     ''authorize_scopes'': providerMeta.authorize_scopes,'
              - '    };'
              - '   }'
              - '   return requestParams;'
              - '  };'
              - '  let createIdentityProvider = (providerName) => {'
              - '   let requestParams = getRequestParams(providerName);'
              - '   if (!requestParams) {'
              - '     return Promise.resolve();'
              - '   }'
              - '   requestParams.ProviderType = requestParams.ProviderName;'
              - '   return identity.createIdentityProvider(requestParams).promise();'
              - '  };'
              - '  let updateIdentityProvider = (providerName) => {'
              - '   let requestParams = getRequestParams(providerName);'
              - '   if (!requestParams) {'
              - '     return Promise.resolve();'
              - '   }'
              - '   return identity.updateIdentityProvider(requestParams).promise();'
              - '  };'
              - '  let deleteIdentityProvider = (providerName) => {'
              - '   let params = {ProviderName: providerName, UserPoolId: userPoolId};'
              - '   return identity.deleteIdentityProvider(params).promise();'
              - '  };'
              - '  let providerPromises = [];'
              - '  identity.listIdentityProviders({UserPoolId: userPoolId, MaxResults: 60}).promise()'
              - '  .then((result) => {'
              - '   let providerList = result.Providers.map(provider => provider.ProviderName);'
              - '   let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);'
              - '   hostedUIProviderMeta.forEach((providerMetadata) => {'
              - '    if(providerList.indexOf(providerMetadata.ProviderName) > -1) {'
              - '     providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));'
              - '    } else {'
              - '     providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));'
              - '    }'
              - '  });'
              - '  providerList.forEach((provider) => {'
              - '   if(providerListInParameters.indexOf(provider) < 0) {'
              - '    providerPromises.push(deleteIdentityProvider(provider));'
              - '   }'
              - '  });'
              - '  return Promise.all(providerPromises);'
              - ' }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
              - '   console.log(err.stack); response.send(event, context, response.FAILED, {err})'
              - ' });'
              - ' } '
              - ' } catch(err) { console.log(err.stack); response.send(event, context, response.FAILED, {err});};'
              - '} '
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  HostedUIProvidersCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUIProvider
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:CreateIdentityProvider
              - cognito-idp:UpdateIdentityProvider
              - cognito-idp:ListIdentityProviders
              - cognito-idp:DeleteIdentityProvider
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: HostedUIProvidersCustomResource
  HostedUIProvidersCustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - hostedUIProviderLogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: HostedUIProvidersCustomResource
    DependsOn: HostedUIProvidersCustomResourcePolicy
  HostedUIProvidersCustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - HostedUIProvidersCustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIProviderMeta:
        Ref: hostedUIProviderMeta
      hostedUIProviderCreds:
        Ref: hostedUIProviderCreds
    DependsOn: HostedUIProvidersCustomResourceLogPolicy
  OAuthCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - try{
              - ' const userPoolId = event.ResourceProperties.userPoolId;'
              - ' let webClientId = event.ResourceProperties.webClientId;'
              - ' let nativeClientId = event.ResourceProperties.nativeClientId;'
              - ' let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);'
              - ' let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);'
              - ' let providerList = hostedUIProviderMeta.map(provider => provider.ProviderName);'
              - ' providerList.push(''COGNITO'');'
              - ' if (event.RequestType == ''Delete'') {'
              - '  response.send(event, context, response.SUCCESS, {});'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '  let params = {'
              - '   UserPoolId: userPoolId,'
              - '   AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,'
              - '   AllowedOAuthFlowsUserPoolClient: true,'
              - '   AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,'
              - '   CallbackURLs: oAuthMetadata.CallbackURLs,'
              - '   LogoutURLs: oAuthMetadata.LogoutURLs,'
              - '   SupportedIdentityProviders: providerList'
              - '  };'
              - '  let updateUserPoolClientPromises = [];'
              - '  params.ClientId = webClientId;'
              - '  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());'
              - '  params.ClientId = nativeClientId;'
              - '  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());'
              - '  Promise.all(updateUserPoolClientPromises)'
              - '  .then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
              - '    console.log(err.stack); response.send(event, context, response.FAILED, {err});'
              - '  });'
              - ' }'
              - >-
                } catch(err) { console.log(err.stack); response.send(event,
                context, response.FAILED, {err});};
              - '}'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: HostedUIProvidersCustomResourceInputs
  OAuthCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - OAuth
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:UpdateUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: OAuthCustomResource
  OAuthCustomResourceLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - '-'
          - - Ref: UserPool
            - OAuthLogPolicy
      Roles:
        - Ref: UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: OAuthCustomResource
    DependsOn: OAuthCustomResourcePolicy
  OAuthCustomResourceInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - OAuthCustomResource
          - Arn
      userPoolId:
        Ref: UserPool
      hostedUIProviderMeta:
        Ref: hostedUIProviderMeta
      oAuthMetadata:
        Ref: oAuthMetadata
      webClientId:
        Ref: UserPoolClientWeb
      nativeClientId:
        Ref: UserPoolClient
    DependsOn: OAuthCustomResourceLogPolicy
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - testAuthIdentityPool
          - Fn::Join:
              - ''
              - - testAuthIdentityPool
                - __
                - Ref: env
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
        - ClientId:
            Ref: UserPoolClientWeb
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
      AllowUnauthenticatedIdentities:
        Ref: allowUnauthenticatedIdentities
    DependsOn: UserPoolClientInputs
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        unauthenticated:
          Ref: unauthRoleArn
        authenticated:
          Ref: authRoleArn
    DependsOn: IdentityPool
Outputs:
  IdentityPoolId:
    Value:
      Ref: IdentityPool
    Description: Id for the identity pool
  IdentityPoolName:
    Value:
      Fn::GetAtt:
        - IdentityPool
        - Name
  HostedUIDomain:
    Value:
      Fn::If:
        - ShouldNotCreateEnvResources
        - Ref: hostedUIDomainName
        - Fn::Join:
            - '-'
            - - Ref: hostedUIDomainName
              - Ref: env
  OAuthMetadata:
    Value:
      Ref: oAuthMetadata
  UserPoolId:
    Value:
      Ref: UserPool
    Description: Id for the user pool
  UserPoolArn:
    Value:
      Fn::GetAtt:
        - UserPool
        - Arn
    Description: Arn for the user pool
  UserPoolName:
    Value:
      Ref: userPoolName
  AppClientIDWeb:
    Value:
      Ref: UserPoolClientWeb
    Description: The user pool app client id for web
  AppClientID:
    Value:
      Ref: UserPoolClient
    Description: The user pool app client id
  AppClientSecret:
    Value:
      Fn::GetAtt:
        - UserPoolClientInputs
        - appSecret
    Condition: ShouldOutputAppClientSecrets
Description: >-
  {"createdOn":"Mac","createdBy":"Amplify","createdWith":"8.3.1","stackType":"auth-Cognito","metadata":{}}
