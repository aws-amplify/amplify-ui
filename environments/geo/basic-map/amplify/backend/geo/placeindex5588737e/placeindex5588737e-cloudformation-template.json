{
  "Mappings": {
    "RegionMapping": {
      "us-east-1": {
        "locationServiceRegion": "us-east-1"
      },
      "us-east-2": {
        "locationServiceRegion": "us-east-2"
      },
      "us-west-2": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-southeast-1": {
        "locationServiceRegion": "ap-southeast-1"
      },
      "ap-southeast-2": {
        "locationServiceRegion": "ap-southeast-2"
      },
      "ap-northeast-1": {
        "locationServiceRegion": "ap-northeast-1"
      },
      "eu-central-1": {
        "locationServiceRegion": "eu-central-1"
      },
      "eu-north-1": {
        "locationServiceRegion": "eu-north-1"
      },
      "eu-west-1": {
        "locationServiceRegion": "eu-west-1"
      },
      "sa-east-1": {
        "locationServiceRegion": "us-east-1"
      },
      "ca-central-1": {
        "locationServiceRegion": "us-east-1"
      },
      "us-west-1": {
        "locationServiceRegion": "us-west-2"
      },
      "cn-north-1": {
        "locationServiceRegion": "us-west-2"
      },
      "cn-northwest-1": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-south-1": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-northeast-3": {
        "locationServiceRegion": "us-west-2"
      },
      "ap-northeast-2": {
        "locationServiceRegion": "us-west-2"
      },
      "eu-west-2": {
        "locationServiceRegion": "eu-west-1"
      },
      "eu-west-3": {
        "locationServiceRegion": "eu-west-1"
      },
      "me-south-1": {
        "locationServiceRegion": "ap-southeast-1"
      }
    }
  },
  "Parameters": {
    "authRoleName": {
      "Type": "String"
    },
    "unauthRoleName": {
      "Type": "String"
    },
    "indexName": {
      "Type": "String"
    },
    "dataProvider": {
      "Type": "String"
    },
    "dataSourceIntendedUse": {
      "Type": "String"
    },
    "pricingPlan": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    },
    "isDefault": {
      "Type": "String"
    }
  },
  "Resources": {
    "CustomPlaceIndexLambdaServiceRoleFD2F3C9D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "CustomPlaceIndexLambdaServiceRoleDefaultPolicy818068B1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "geo:CreatePlaceIndex",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "geo:UpdatePlaceIndex",
                "geo:DeletePlaceIndex"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:geo:${region}:${account}:place-index/${indexName}",
                  {
                    "region": {
                      "Fn::FindInMap": [
                        "RegionMapping",
                        {
                          "Ref": "AWS::Region"
                        },
                        "locationServiceRegion"
                      ]
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "indexName": {
                      "Fn::Join": [
                        "-",
                        [
                          {
                            "Ref": "indexName"
                          },
                          {
                            "Ref": "env"
                          }
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomPlaceIndexLambdaServiceRoleDefaultPolicy818068B1",
        "Roles": [
          {
            "Ref": "CustomPlaceIndexLambdaServiceRoleFD2F3C9D"
          }
        ]
      }
    },
    "CustomPlaceIndexLambda79813BB9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nexports.handler = async (event, context) => {\n  try {\n    console.log('REQUEST RECEIVED:' + JSON.stringify(event));\n    if (event.RequestType == 'Create') {\n      const params = {\n        IndexName: event.ResourceProperties.indexName,\n        DataSource: event.ResourceProperties.dataSource,\n        PricingPlan: event.ResourceProperties.pricingPlan,\n        DataSourceConfiguration: {\n          IntendedUse: event.ResourceProperties.dataSourceIntendedUse,\n        },\n      };\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.createPlaceIndex(params).promise();\n      console.log('create resource response data' + JSON.stringify(res));\n      if (res.IndexName && res.IndexArn) {\n        event.PhysicalResourceId = res.IndexName;\n        await send(event, context, response.SUCCESS, res);\n      } else {\n        await send(event, context, response.FAILED, res);\n      }\n    }\n    if (event.RequestType == 'Update') {\n      const params = {\n        IndexName: event.ResourceProperties.indexName,\n        PricingPlan: event.ResourceProperties.pricingPlan,\n        DataSourceConfiguration: {\n          IntendedUse: event.ResourceProperties.dataSourceIntendedUse,\n        },\n      };\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.updatePlaceIndex(params).promise();\n      console.log('update resource response data' + JSON.stringify(res));\n      if (res.IndexName && res.IndexArn) {\n        event.PhysicalResourceId = res.IndexName;\n        await send(event, context, response.SUCCESS, res);\n      } else {\n        await send(event, context, response.FAILED, res);\n      }\n    }\n    if (event.RequestType == 'Delete') {\n      const params = {\n        IndexName: event.ResourceProperties.indexName,\n      };\n      const locationClient = new aws.Location({ apiVersion: '2020-11-19', region: event.ResourceProperties.region });\n      const res = await locationClient.deletePlaceIndex(params).promise();\n      event.PhysicalResourceId = event.ResourceProperties.indexName;\n      console.log('delete resource response data' + JSON.stringify(res));\n      await send(event, context, response.SUCCESS, res);\n    }\n  } catch (err) {\n    console.log(err.stack);\n    const res = { Error: err };\n    await send(event, context, response.FAILED, res);\n    throw err;\n  }\n};\n\nfunction send(event, context, status, data) {\n  return new Promise(() => {\n    response.send(event, context, status, data);\n  });\n}\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "CustomPlaceIndexLambdaServiceRoleFD2F3C9D",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "Timeout": 300
      },
      "DependsOn": [
        "CustomPlaceIndexLambdaServiceRoleDefaultPolicy818068B1",
        "CustomPlaceIndexLambdaServiceRoleFD2F3C9D"
      ]
    },
    "CustomPlaceIndex": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomPlaceIndexLambda79813BB9",
            "Arn"
          ]
        },
        "indexName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "indexName"
              },
              {
                "Ref": "env"
              }
            ]
          ]
        },
        "dataSource": {
          "Ref": "dataProvider"
        },
        "dataSourceIntendedUse": {
          "Ref": "dataSourceIntendedUse"
        },
        "pricingPlan": {
          "Ref": "pricingPlan"
        },
        "region": {
          "Fn::FindInMap": [
            "RegionMapping",
            {
              "Ref": "AWS::Region"
            },
            "locationServiceRegion"
          ]
        },
        "env": {
          "Ref": "env"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "PlaceIndexPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "geo:SearchPlaceIndexForPosition",
                "geo:SearchPlaceIndexForText"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CustomPlaceIndex",
                  "IndexArn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "indexName"
                    },
                    {
                      "Ref": "env"
                    }
                  ]
                ]
              },
              "Policy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "authRoleName"
          },
          {
            "Ref": "unauthRoleName"
          }
        ]
      }
    }
  },
  "Outputs": {
    "Name": {
      "Value": {
        "Fn::GetAtt": [
          "CustomPlaceIndex",
          "IndexName"
        ]
      }
    },
    "Region": {
      "Value": {
        "Fn::FindInMap": [
          "RegionMapping",
          {
            "Ref": "AWS::Region"
          },
          "locationServiceRegion"
        ]
      }
    },
    "Arn": {
      "Value": {
        "Fn::GetAtt": [
          "CustomPlaceIndex",
          "IndexArn"
        ]
      }
    }
  },
  "Description": "{\"createdOn\":\"Mac\",\"createdBy\":\"Amplify\",\"createdWith\":\"9.2.1\",\"stackType\":\"geo-PlaceIndex\",\"metadata\":{}}"
}