import { FileStatus, FileUploaderProps } from '../FileUploader/types';
import { PathCallback, UploadTask } from '../FileUploader/utils';

interface BucketInfo {
  bucketName: string;
  region: string;
}

// accepts either a 'friendly name' that the user has assigned
// or an object containing the region as well as the name generated by the backend
export type StorageBucket = string | BucketInfo;

export interface StorageFile {
  id: string;
  file?: File;
  status: FileStatus;
  progress: number;
  // only present after `processFile` complete
  processedKey?: string;
  uploadTask?: UploadTask;
  key: string;
  error: string;
  isImage: boolean;
}

export type StorageFiles = StorageFile[];

export type DefaultFile = Pick<StorageFile, 'key'>;

export interface ProcessFileParams extends Record<string, any> {
  file: File;
  key: string;
  useAccelerateEndpoint?: boolean;
}

export type ProcessFile = (
  params: ProcessFileParams
) => Promise<ProcessFileParams> | ProcessFileParams;

export interface StorageManagerHandle {
  clearFiles: () => void;
}

export interface StorageManagerProps extends FileUploaderProps {}

export interface StorageManagerPathProps
  extends Omit<StorageManagerProps, 'accessLevel' | 'bucket' | 'path'> {
  /** S3 bucket, allows either a string or `BucketInfo`:
   * - `string`: the "friendly name" assigned to the bucket
   * - `BucketInfo`: object containing the actual S3 bucket name and its region
   */
  bucket?: StorageBucket;
  /**
   * S3 bucket key, allows either a `string` or a `PathCallback`:
   * - `string`: `path` is prefixed to the file `key` for each file
   * - `PathCallback`: callback provided an input containing the current `identityId`,
   *    resolved value is prefixed to the file `key` for each file
   */
  path: string | PathCallback;
  accessLevel?: never;
  useAccelerateEndpoint?: boolean;
}
