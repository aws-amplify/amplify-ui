{
  "version": 3,
  "sources": ["../src/index.ts", "../src/machines/authMachine.ts", "../src/machines/actors/auth/signIn.ts", "../src/types/authMachine.ts", "../src/machines/actors/auth/signUp.ts", "../src/validators/index.ts", "../src/machines/actors/auth/signOut.ts", "../src/machines/actors/auth/resetPassword.ts", "../src/machines/actions/auth.ts", "../src/authService.ts", "../src/helpers/auth.ts", "../src/i18n/translations.ts"],
  "sourcesContent": ["export * from './machines';\nexport * from './authService';\nexport * from './types';\nexport * from './helpers';\nexport * from './i18n';\n", "import { assign, createMachine, forwardTo, spawn } from 'xstate';\nimport { Auth, Amplify } from 'aws-amplify';\nimport { AuthContext, AuthEvent } from '../types';\nimport {\n  signInActor,\n  signUpActor,\n  signOutActor,\n  resetPasswordActor,\n} from './actors';\nimport { stopActor } from './actions';\n\nexport const authMachine = createMachine<AuthContext, AuthEvent>(\n  {\n    id: 'auth',\n    initial: 'idle',\n    context: {\n      user: undefined,\n      config: undefined,\n      actorRef: undefined,\n    },\n    states: {\n      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises\n      idle: {\n        invoke: [\n          {\n            // TODO Wait for Auth to be configured\n            src: 'getCurrentUser',\n            onDone: {\n              actions: 'setUser',\n              target: 'authenticated',\n            },\n            onError: 'signIn',\n          },\n          {\n            src: 'getAmplifyConfig',\n            onDone: {\n              actions: 'setAuthConfig',\n            },\n          },\n        ],\n      },\n      signIn: {\n        entry: 'spawnSignInActor',\n        exit: stopActor('signInActor'),\n        on: {\n          SIGN_UP: 'signUp',\n          RESET_PASSWORD: 'resetPassword',\n          'done.invoke.signInActor': [\n            {\n              target: 'signUp',\n              cond: 'shouldRedirectToSignUp',\n            },\n            {\n              target: 'resetPassword',\n              cond: 'shouldRedirectToResetPassword',\n            },\n            {\n              target: 'authenticated',\n              actions: 'setUser',\n            },\n          ],\n        },\n      },\n      signUp: {\n        entry: 'spawnSignUpActor',\n        exit: stopActor('signUpActor'),\n        on: {\n          SIGN_IN: 'signIn',\n          'done.invoke.signUpActor': {\n            target: 'signIn',\n            actions: 'setUser',\n          },\n        },\n      },\n      resetPassword: {\n        entry: 'spawnResetPasswordActor',\n        exit: stopActor('resetPasswordActor'),\n        on: {\n          SIGN_IN: 'signIn',\n          'done.invoke.resetPasswordActor': 'signIn',\n        },\n      },\n      signOut: {\n        entry: 'spawnSignOutActor',\n        exit: [stopActor('signOutActor'), 'clearUser'],\n        on: { 'done.invoke.signOutActor': 'idle' },\n      },\n      authenticated: {\n        on: { SIGN_OUT: 'signOut' },\n      },\n    },\n    on: {\n      CHANGE: { actions: 'forwardToActor' },\n      SUBMIT: { actions: 'forwardToActor' },\n      FEDERATED_SIGN_IN: { actions: 'forwardToActor' },\n      RESEND: { actions: 'forwardToActor' },\n      SIGN_OUT: { actions: 'forwardToActor' },\n      SIGN_IN: { actions: 'forwardToActor' },\n      SKIP: { actions: 'forwardToActor' },\n    },\n  },\n  {\n    actions: {\n      forwardToActor: forwardTo((context) => context.actorRef),\n      setUser: assign({\n        user: (_, event) => event.data.user || event.data,\n      }),\n      clearUser: assign({\n        user: undefined,\n      }),\n      setAuthConfig: assign({\n        config(_, event) {\n          return event.data.auth;\n        },\n      }),\n      spawnSignInActor: assign({\n        actorRef: (_, event) => {\n          const actor = signInActor.withContext({\n            authAttributes: event.data?.authAttributes,\n            user: event.data?.user,\n            intent: event.data?.intent,\n            formValues: {},\n            validationError: {},\n          });\n          return spawn(actor, { name: 'signInActor' });\n        },\n      }),\n      spawnSignUpActor: assign({\n        actorRef: (context, event) => {\n          const actor = signUpActor.withContext({\n            authAttributes: event.data?.authAttributes ?? {},\n            intent: event.data?.intent,\n            formValues: {},\n            validationError: {},\n            login_mechanisms: context.config?.login_mechanisms,\n          });\n          return spawn(actor, { name: 'signUpActor' });\n        },\n      }),\n      spawnResetPasswordActor: assign({\n        actorRef: (context, event) => {\n          const actor = resetPasswordActor.withContext({\n            formValues: {},\n            intent: event.data?.intent,\n            username: event.data?.authAttributes?.username,\n            validationError: {},\n          });\n          return spawn(actor, { name: 'resetPasswordActor' });\n        },\n      }),\n      spawnSignOutActor: assign({\n        actorRef: (context) => {\n          const actor = signOutActor.withContext({\n            user: context.user,\n          });\n          return spawn(actor, { name: 'signOutActor' });\n        },\n      }),\n    },\n    guards: {\n      shouldRedirectToSignUp: (_, event): boolean => {\n        if (!event.data?.intent) return false;\n        return event.data.intent === 'confirmSignUp';\n      },\n      shouldRedirectToResetPassword: (_, event): boolean => {\n        if (!event.data?.intent) return false;\n        return event.data.intent === 'confirmPasswordReset';\n      },\n    },\n    services: {\n      async getCurrentUser() {\n        return Auth.currentAuthenticatedUser();\n      },\n      async getAmplifyConfig() {\n        return Amplify.configure();\n      },\n    },\n  }\n);\n", "import { createMachine, assign, sendUpdate } from 'xstate';\nimport { get, isEmpty } from 'lodash';\n\nimport { AuthEvent, AuthChallengeNames, SignInContext } from '../../../types';\nimport { Auth } from 'aws-amplify';\n\nexport const signInActor = createMachine<SignInContext, AuthEvent>(\n  {\n    initial: 'init',\n    id: 'signInActor',\n    states: {\n      init: {\n        always: [\n          { target: 'signIn.submit', cond: 'shouldAutoSignIn' },\n          { target: 'signIn' },\n        ],\n      },\n      signIn: {\n        initial: 'edit',\n        exit: 'clearFormValues',\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              CHANGE: { actions: 'handleInput' },\n              FEDERATED_SIGN_IN: 'federatedSignIn',\n            },\n          },\n          federatedSignIn: {\n            entry: [sendUpdate(), 'clearError'],\n            invoke: {\n              src: 'federatedSignIn',\n              // getting navigated out anyway, only track errors.\n              // onDone: '#signInActor.resolved',\n              onError: { actions: 'setRemoteError' },\n            },\n          },\n          submit: {\n            entry: ['clearError', sendUpdate()],\n            invoke: {\n              src: 'signIn',\n              onDone: [\n                {\n                  cond: 'shouldSetupTOTP',\n                  actions: ['setUser', 'setChallengeName'],\n                  target: '#signInActor.setupTOTP',\n                },\n                {\n                  cond: 'shouldConfirmSignIn',\n                  actions: ['setUser', 'setChallengeName'],\n                  target: '#signInActor.confirmSignIn',\n                },\n                {\n                  cond: 'shouldForceChangePassword',\n                  actions: ['setUser', 'setChallengeName'],\n                  target: '#signInActor.forceNewPassword',\n                },\n                {\n                  actions: 'setUser',\n                  target: 'verifying',\n                },\n              ],\n              onError: [\n                {\n                  cond: 'shouldRedirectToConfirmSignUp',\n                  actions: ['setUsername', 'setConfirmSignUpIntent'],\n                  target: 'rejected',\n                },\n                {\n                  cond: 'shouldRedirectToConfirmResetPassword',\n                  actions: ['setUsername', 'setConfirmResetPasswordIntent'],\n                  target: 'rejected',\n                },\n                {\n                  actions: 'setRemoteError',\n                  target: 'edit',\n                },\n              ],\n            },\n          },\n          verifying: {\n            entry: ['clearError', sendUpdate()],\n            invoke: {\n              src: 'checkVerifiedContact',\n              onDone: [\n                {\n                  cond: 'shouldRequestVerification',\n                  target: '#signInActor.verifyUser',\n                  actions: 'setUnverifiedAttributes',\n                },\n                {\n                  target: 'resolved',\n                },\n              ],\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n          resolved: { always: '#signInActor.resolved' },\n          rejected: { always: '#signInActor.rejected' },\n        },\n      },\n      confirmSignIn: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: ['clearError', sendUpdate()],\n            invoke: {\n              src: 'confirmSignIn',\n              onDone: {\n                target: '#signInActor.resolved',\n                actions: ['setUser', 'clearChallengeName'],\n              },\n              onError: {\n                target: 'edit',\n                actions: 'setRemoteError',\n              },\n            },\n          },\n        },\n      },\n      forceNewPassword: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: 'clearError',\n            invoke: {\n              src: 'forceNewPassword',\n              onDone: {\n                actions: ['setUser', 'clearChallengeName'],\n                target: '#signInActor.resolved',\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      setupTOTP: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: [sendUpdate(), 'clearError'],\n            invoke: {\n              src: 'verifyTotpToken',\n              onDone: {\n                actions: ['setUser', 'clearChallengeName'],\n                target: '#signInActor.resolved',\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      verifyUser: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              SKIP: '#signInActor.resolved',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: 'clearError',\n            invoke: {\n              src: 'verifyUser',\n              onDone: {\n                target: '#signInActor.confirmVerifyUser',\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      confirmVerifyUser: {\n        initial: 'edit',\n        exit: [\n          'clearFormValues',\n          'clearError',\n          'clearUnverifiedAttributes',\n          'clearAttributeToVerify',\n        ],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              SKIP: '#signInActor.resolved',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: 'clearError',\n            invoke: {\n              src: 'confirmVerifyUser',\n              onDone: {\n                target: '#signInActor.resolved',\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      resolved: {\n        type: 'final',\n        data: (context) => ({\n          user: context.user,\n        }),\n      },\n      rejected: {\n        type: 'final',\n        data: (context, event) => {\n          return {\n            intent: context.redirectIntent,\n            authAttributes: context.authAttributes,\n          };\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      handleInput: assign({\n        formValues(context, event) {\n          const { name, value } = event.data;\n          return { ...context.formValues, [name]: value };\n        },\n      }),\n      setUser: assign({\n        user: (_, event) => event.data.user || event.data,\n      }),\n      setUsername: assign({\n        authAttributes: (context) => ({\n          username: context.formValues.username,\n        }),\n      }),\n      setRemoteError: assign({\n        remoteError: (_, event) => event.data?.message || event.data,\n      }),\n      setChallengeName: assign({\n        challengeName: (_, event) => event.data?.challengeName,\n      }),\n      setConfirmSignUpIntent: assign({\n        redirectIntent: 'confirmSignUp',\n      }),\n      setConfirmResetPasswordIntent: assign({\n        redirectIntent: 'confirmPasswordReset',\n      }),\n      setUnverifiedAttributes: assign({\n        unverifiedAttributes: (_, event) => event.data.unverified,\n      }),\n      clearChallengeName: assign({ challengeName: undefined }),\n      clearError: assign({ remoteError: '' }),\n      clearFormValues: assign({ formValues: {} }),\n      clearUnverifiedAttributes: assign({ unverifiedAttributes: undefined }),\n      clearAttributeToVerify: assign({ attributeToVerify: undefined }),\n    },\n    guards: {\n      shouldConfirmSignIn: (_, event): boolean => {\n        const challengeName = get(event, 'data.challengeName');\n        const validChallengeNames = [\n          AuthChallengeNames.SMS_MFA,\n          AuthChallengeNames.SOFTWARE_TOKEN_MFA,\n        ];\n\n        return validChallengeNames.includes(challengeName);\n      },\n      shouldRedirectToConfirmSignUp: (_, event): boolean => {\n        return event.data.code === 'UserNotConfirmedException';\n      },\n      shouldRedirectToConfirmResetPassword: (_, event): boolean => {\n        return event.data.code === 'PasswordResetRequiredException';\n      },\n      shouldSetupTOTP: (_, event): boolean => {\n        const challengeName = get(event, 'data.challengeName');\n\n        return challengeName === AuthChallengeNames.MFA_SETUP;\n      },\n      shouldForceChangePassword: (_, event): boolean => {\n        const challengeName = get(event, 'data.challengeName');\n\n        return challengeName === AuthChallengeNames.NEW_PASSWORD_REQUIRED;\n      },\n      shouldAutoSignIn: (context) => {\n        return !!(context.intent && context.intent === 'autoSignIn');\n      },\n      shouldRequestVerification: (_, event): boolean => {\n        const { unverified, verified } = event.data;\n\n        return isEmpty(verified) && !isEmpty(unverified);\n      },\n    },\n    services: {\n      async signIn(context) {\n        const source = !!(context.intent && context.intent === 'autoSignIn')\n          ? context.authAttributes\n          : context.formValues;\n        const { username, password } = source;\n        return Auth.signIn(username, password);\n      },\n      async confirmSignIn(context, event) {\n        const { challengeName, user } = context;\n        const { confirmation_code: code } = event.data;\n\n        let mfaType;\n        if (\n          challengeName === AuthChallengeNames.SMS_MFA ||\n          challengeName === AuthChallengeNames.SOFTWARE_TOKEN_MFA\n        ) {\n          mfaType = challengeName;\n        }\n\n        return Auth.confirmSignIn(user, code, mfaType);\n      },\n      async forceNewPassword(context, event) {\n        const { user } = context;\n        const password = get(event, 'data.password');\n\n        return Auth.completeNewPassword(user, password);\n      },\n      async verifyTotpToken(context, event) {\n        const { user } = context;\n        const { confirmation_code } = event.data;\n\n        return Auth.verifyTotpToken(user, confirmation_code);\n      },\n      async federatedSignIn(_, event) {\n        const { provider } = event.data;\n        const result = await Auth.federatedSignIn({ provider });\n\n        return result;\n      },\n      async checkVerifiedContact(context, event) {\n        const { user } = context;\n        const result = await Auth.verifiedContact(user);\n\n        return result;\n      },\n      async verifyUser(context, event) {\n        const result = await Auth.verifyCurrentUserAttribute(\n          event.data.unverifiedAttr\n        );\n\n        context.attributeToVerify = event.data.unverifiedAttr;\n\n        return result;\n      },\n      async confirmVerifyUser(context, event) {\n        const { attributeToVerify } = context;\n        const { confirmation_code: code } = event.data;\n\n        const result = await Auth.verifyCurrentUserAttributeSubmit(\n          attributeToVerify,\n          code\n        );\n\n        return result;\n      },\n    },\n  }\n);\n", "import { CognitoUser } from 'amazon-cognito-identity-js';\nimport { Interpreter, State } from 'xstate';\nimport { ValidationError } from './validator';\n\nexport type AuthFormData = Record<string, string>;\n\nexport interface AuthContext {\n  user?: CognitoUserAmplify;\n  config?: {\n    login_mechanisms: string[];\n  };\n  actorRef?: any;\n}\n\nexport interface SignInContext {\n  remoteError?: string;\n  validationError?: ValidationError;\n  formValues?: AuthFormData;\n  user?: CognitoUserAmplify;\n  challengeName?: string;\n  authAttributes?: Record<string, any>;\n  intent?: string;\n  redirectIntent?: string;\n  unverifiedAttributes?: Record<string, string>;\n  attributeToVerify?: string;\n}\n\nexport interface SignUpContext {\n  remoteError?: string;\n  validationError?: ValidationError;\n  formValues?: AuthFormData;\n  user?: CognitoUserAmplify;\n  login_mechanisms?: string[];\n  intent?: string;\n  authAttributes?: Record<string, any>;\n  challengeName?: string;\n}\n\nexport interface ResetPasswordContext {\n  validationError?: ValidationError;\n  remoteError?: string;\n  formValues?: ValidationError;\n  username?: string;\n  intent?: string;\n  user?: CognitoUserAmplify;\n  authAttributes?: Record<string, any>;\n  challengeName?: string;\n}\n\nexport interface SignOutContext {\n  user?: CognitoUserAmplify;\n  authAttributes?: Record<string, any>;\n  challengeName?: string;\n}\n\n// actors that have forms. Has `formValues, remoteErrror, and validationError in common.\nexport type ActorContextWithForms =\n  | SignInContext\n  | SignUpContext\n  | ResetPasswordContext;\n\nexport type SignInState = State<SignInContext, AuthEvent>;\nexport type SignUpState = State<SignUpContext, AuthEvent>;\nexport type SignOutState = State<SignOutContext, AuthEvent>;\nexport type ResetPasswordState = State<ResetPasswordContext, AuthEvent>;\nexport type AuthActorContext = ActorContextWithForms | SignOutContext;\nexport type AuthActorState = State<AuthActorContext, AuthEvent>;\nexport interface CognitoUserAmplify extends CognitoUser {\n  username?: string;\n}\n\nexport type InvokeActorEventTypes =\n  | 'done.invoke.signInActor'\n  | 'done.invoke.signUpActor'\n  | 'done.invoke.signOutActor'\n  | 'done.invoke.resetPasswordActor';\n\nexport type AuthEventTypes =\n  | 'SIGN_IN'\n  | 'SIGN_UP'\n  | 'SIGN_OUT'\n  | 'SUBMIT'\n  | 'RESEND'\n  | 'CHANGE'\n  | 'FEDERATED_SIGN_IN'\n  | 'RESET_PASSWORD'\n  | 'SKIP'\n  | InvokeActorEventTypes;\n\nexport enum AuthChallengeNames {\n  SMS_MFA = 'SMS_MFA',\n  SOFTWARE_TOKEN_MFA = 'SOFTWARE_TOKEN_MFA',\n  NEW_PASSWORD_REQUIRED = 'NEW_PASSWORD_REQUIRED',\n  RESET_REQUIRED = 'RESET_REQUIRED',\n  MFA_SETUP = 'MFA_SETUP',\n}\n\nexport interface InputAttributes {\n  label: string;\n  type: string;\n  placeholder: string;\n}\n\nexport const userNameAliasArray = [\n  'username',\n  'email',\n  'phone_number',\n] as const;\n\nexport type UserNameAlias = typeof userNameAliasArray[number];\n\nexport const socialProviderLoginMechanisms = ['amazon', 'google', 'facebook'];\n\n// other non-alias inputs that Cognito would require\nexport type AuthInputNames = UserNameAlias | 'confirmation_code' | 'password';\n\nexport type AuthInputAttributes = Record<AuthInputNames, InputAttributes>;\n\nexport interface AuthEvent {\n  type: AuthEventTypes;\n  data?: Record<PropertyKey, any>;\n}\n\nexport type AuthMachineState = State<AuthContext, AuthEvent>;\n\nexport type AuthInterpreter = Interpreter<AuthContext, any, AuthEvent>;\n", "import { createMachine, assign, sendUpdate } from 'xstate';\nimport { passwordMatches, runValidators } from '../../../validators';\n\nimport { AuthEvent, SignUpContext } from '../../../types';\nimport { Auth } from 'aws-amplify';\n\nexport const signUpActor = createMachine<SignUpContext, AuthEvent>(\n  {\n    id: 'signUpActor',\n    initial: 'init',\n    states: {\n      init: {\n        always: [\n          { target: 'confirmSignUp', cond: 'shouldInitConfirmSignUp' },\n          { target: 'signUp' },\n        ],\n      },\n      signUp: {\n        type: 'parallel',\n        exit: ['clearError', 'clearFormValues'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError',\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors',\n                  },\n                },\n              },\n              valid: { entry: sendUpdate() },\n              invalid: { entry: sendUpdate() },\n            },\n            on: {\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending',\n              },\n            },\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: sendUpdate(),\n                on: {\n                  SUBMIT: 'validate',\n                  FEDERATED_SIGN_IN: 'federatedSignIn',\n                },\n              },\n              federatedSignIn: {\n                entry: [sendUpdate(), 'clearError'],\n                invoke: {\n                  src: 'federatedSignIn',\n                  onDone: '#signUpActor.resolved',\n                  onError: { actions: 'setRemoteError' },\n                },\n              },\n              validate: {\n                entry: sendUpdate(),\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'pending',\n                    actions: 'clearValidationError',\n                  },\n                  onError: {\n                    target: 'idle',\n                    actions: 'setFieldErrors',\n                  },\n                },\n              },\n              pending: {\n                entry: [sendUpdate(), 'clearError'],\n                invoke: {\n                  src: 'signUp',\n                  onDone: {\n                    target: 'resolved',\n                    actions: ['setUser', 'setCredentials'],\n                  },\n                  onError: {\n                    target: 'idle',\n                    actions: 'setRemoteError',\n                  },\n                },\n              },\n              resolved: { type: 'final', always: '#signUpActor.confirmSignUp' },\n            },\n          },\n        },\n      },\n      confirmSignUp: {\n        initial: 'edit',\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              CHANGE: { actions: 'handleInput' },\n              RESEND: 'resend',\n            },\n          },\n          resend: {\n            entry: sendUpdate(),\n            invoke: {\n              src: 'resendConfirmationCode',\n              onDone: { target: 'edit' },\n              onError: { target: 'edit', actions: 'setRemoteError' },\n            },\n          },\n          submit: {\n            entry: [sendUpdate(), 'clearError'],\n            invoke: {\n              src: 'confirmSignUp',\n              onDone: { target: '#signUpActor.resolved' },\n              onError: { target: 'edit', actions: 'setRemoteError' },\n            },\n          },\n        },\n      },\n      resolved: {\n        type: 'final',\n        data: (context) => {\n          const { username, password } = context.authAttributes;\n          const canAutoSignIn = !!(username && password);\n          return {\n            user: context.user,\n            intent: canAutoSignIn ? 'autoSignIn' : null,\n            authAttributes: { username, password },\n          };\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      shouldInitConfirmSignUp: (context) => {\n        return context.intent && context.intent === 'confirmSignUp';\n      },\n    },\n    actions: {\n      setUser: assign({\n        user: (_, event) => event.data.user ?? event.data,\n      }),\n      setRemoteError: assign({\n        remoteError: (_, event) => event.data?.message || event.data,\n      }),\n      setFieldErrors: assign({\n        validationError: (_, event) => event.data,\n      }),\n      // stores username and password from signUp\n      setCredentials: assign({\n        authAttributes: (context) => {\n          const [primaryAlias] = context.login_mechanisms ?? ['username'];\n          const username = context.formValues[primaryAlias];\n          const password = context.formValues?.password;\n          return { username, password };\n        },\n      }),\n      handleInput: assign({\n        formValues: (context, event) => {\n          const { name, value } = event.data;\n          return { ...context.formValues, [name]: value };\n        },\n      }),\n      clearError: assign({ remoteError: '' }),\n      clearFormValues: assign({ formValues: {} }),\n      clearValidationError: assign({ validationError: {} }),\n    },\n    services: {\n      async confirmSignUp(_, event) {\n        const { username, confirmation_code: code } = event.data;\n\n        return Auth.confirmSignUp(username, code);\n      },\n      async resendConfirmationCode(context, event) {\n        const { username } = event.data;\n\n        return Auth.resendSignUp(username);\n      },\n      async federatedSignIn(_, event) {\n        const { provider } = event.data;\n        const result = await Auth.federatedSignIn({ provider });\n        return result;\n      },\n      async signUp(context, _event) {\n        const {\n          formValues: { password, ...formValues },\n          login_mechanisms,\n        } = context;\n\n        const [primaryAlias] = login_mechanisms ?? ['username'];\n\n        if (formValues.phone_number) {\n          formValues.phone_number = formValues.phone_number.replace(\n            /[^A-Z0-9+]/gi,\n            ''\n          );\n        }\n\n        const username = formValues[primaryAlias];\n        delete formValues[primaryAlias];\n        delete formValues.confirm_password; // confirm_password field should not be sent to Cognito\n\n        const result = await Auth.signUp({\n          username,\n          password,\n          attributes: formValues,\n        });\n\n        // TODO `cond`itionally transition to `signUp.confirm` or `resolved` based on result\n        return result;\n      },\n      async validateFields(context, _event) {\n        const { formValues } = context;\n        const validators = [passwordMatches]; // this can contain custom validators too\n        return runValidators(formValues, validators);\n      },\n    },\n  }\n);\n", "import { AuthFormData, Validator } from '../types';\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nexport const passwordMatches: Validator = (formValues: AuthFormData) => {\n  const { password, confirm_password } = formValues;\n\n  if (!password && !confirm_password) {\n    // these inputs are clean, don't complain yet\n    return null;\n  } else if (!password || !confirm_password || password !== confirm_password) {\n    // if one of the fields have been filled, or if both fields have been filled\n    // but do not match, return error.\n    return {\n      confirm_password: 'Your passwords must match',\n    };\n  }\n};\n\n// example of high order function that returns a validator\nexport const minLength: (fieldName: string, minLength: number) => Validator = (\n  fieldName,\n  minLength = 4\n) => {\n  return (formData) => {\n    const fieldValue: string = formData[fieldName];\n    if (fieldValue.length < minLength) {\n      return {\n        [fieldName]: `This field must have length of ${minLength} or greater.`,\n      };\n    }\n  };\n};\n\n// Runs all validators given. Resolves if there are no error. Rejects otherwise.\nexport const runValidators = async (\n  formData: AuthFormData,\n  validators: Validator[]\n) => {\n  const errors = await Promise.all(\n    validators.map((validator) => validator(formData))\n  );\n  const mergedError = merge({}, ...errors);\n\n  if (isEmpty(mergedError)) {\n    // no errors were found\n    return Promise.resolve();\n  } else {\n    return Promise.reject(mergedError);\n  }\n};\n", "import { createMachine } from 'xstate';\n\nimport { AuthEvent, SignOutContext } from '../../../types';\nimport { Auth } from 'aws-amplify';\n\nexport const signOutActor = createMachine<SignOutContext, AuthEvent>(\n  {\n    initial: 'pending',\n    id: 'signOutActor',\n    states: {\n      pending: {\n        invoke: {\n          src: 'signOut',\n          onDone: 'resolved',\n          onError: 'rejected',\n        },\n      },\n      resolved: { type: 'final' },\n      rejected: { type: 'final' },\n    },\n  },\n  {\n    services: {\n      signOut: () => Auth.signOut(/* global? */),\n    },\n  }\n);\n", "import { createMachine, assign, sendUpdate } from 'xstate';\n\nimport { AuthEvent, ResetPasswordContext } from '../../../types';\nimport { Auth } from 'aws-amplify';\n\nexport const resetPasswordActor = createMachine<\n  ResetPasswordContext,\n  AuthEvent\n>(\n  {\n    id: 'resetPasswordActor',\n    initial: 'init',\n    states: {\n      init: {\n        always: [\n          { target: 'confirmResetPassword', cond: 'shouldAutoConfirmReset' },\n          { target: 'resetPassword' },\n        ],\n      },\n      resetPassword: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          submit: {\n            entry: [sendUpdate(), 'setUsername', 'clearError'],\n            invoke: {\n              src: 'resetPassword',\n              onDone: {\n                target: '#resetPasswordActor.confirmResetPassword',\n              },\n              onError: {\n                actions: ['setRemoteError'],\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      confirmResetPassword: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError', 'clearUsername'],\n        states: {\n          edit: {\n            entry: sendUpdate(),\n            on: {\n              SUBMIT: 'submit',\n              RESEND: 'resendCode',\n              CHANGE: { actions: 'handleInput' },\n            },\n          },\n          resendCode: {\n            entry: ['clearError', sendUpdate()],\n            invoke: {\n              src: 'resetPassword',\n              onDone: { target: 'edit' },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n          submit: {\n            entry: ['clearError', sendUpdate()],\n            invoke: {\n              src: 'confirmResetPassword',\n              onDone: {\n                actions: 'clearUsername',\n                target: '#resetPasswordActor.resolved',\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit',\n              },\n            },\n          },\n        },\n      },\n      resolved: { type: 'final' },\n    },\n  },\n  {\n    actions: {\n      setRemoteError: assign({\n        remoteError: (_, event) => event.data?.message || event.data,\n      }),\n      setUsername: assign({\n        username: (context) => context.formValues.username,\n      }),\n      handleInput: assign({\n        formValues: (context, event) => {\n          const { name, value } = event.data;\n          return { ...context.formValues, [name]: value };\n        },\n      }),\n      clearFormValues: assign({ formValues: {} }),\n      clearError: assign({ remoteError: '' }),\n      clearUsername: assign({ username: undefined }),\n    },\n    guards: {\n      shouldAutoConfirmReset: (context, event): boolean => {\n        return !!(context.intent && context.intent === 'confirmPasswordReset');\n      },\n    },\n    services: {\n      async resetPassword(context) {\n        const username = context.formValues?.username ?? context.username;\n\n        return Auth.forgotPassword(username);\n      },\n      async confirmResetPassword(context) {\n        const { username } = context;\n        const { confirmation_code: code, password } = context.formValues;\n\n        return Auth.forgotPasswordSubmit(username, code, password);\n      },\n    },\n  }\n);\n", "import { stop } from 'xstate/lib/actions';\n\n// TODO: Add more shared actions here\n\nexport const stopActor = (machineId: string) => {\n  return stop(machineId);\n};\n", "import { interpret } from 'xstate';\nimport { authMachine } from './machines';\n\n// TODO: Share machines https://github.com/davidkpiano/xstate/discussions/1754\n// NOTE! This may not be desirable on the server!\nexport const authService = interpret(authMachine, { devTools: true }).start();\n", "import { includes } from 'lodash';\nimport { AuthContext } from '..';\nimport {\n  AuthActorContext,\n  AuthActorState,\n  AuthInputAttributes,\n  AuthMachineState,\n  userNameAliasArray,\n} from '../types';\n\nexport const authInputAttributes: AuthInputAttributes = {\n  username: {\n    label: 'Username',\n    type: 'text',\n    placeholder: 'Enter your username',\n  },\n  email: {\n    label: 'Email',\n    type: 'email',\n    placeholder: 'Enter your email',\n  },\n  phone_number: {\n    label: 'Phone Number',\n    type: 'tel',\n    placeholder: 'Enter your phone number',\n  },\n  confirmation_code: {\n    label: 'Confirmation Code',\n    placeholder: 'Enter your confirmation code',\n    type: 'number',\n  },\n  password: {\n    label: 'Password',\n    placeholder: 'Enter your password',\n    type: 'password',\n  },\n};\n\nexport enum FederatedIdentityProviders {\n  Amazon = 'LoginWithAmazon',\n  Facebook = 'Facebook',\n  Google = 'Google',\n}\n\n/**\n * Given xstate context from AuthMachine, this returns the input label, type,\n * and error attributes of the configured login_mechanisms.\n */\nexport const getAliasInfoFromContext = (context: AuthContext) => {\n  const loginMechanisms = context.config?.login_mechanisms ?? ['username'];\n  const error = context.actorRef?.context?.validationError['username'];\n\n  let type = 'text';\n  const label = loginMechanisms\n    .filter((mechanism) => includes(userNameAliasArray, mechanism))\n    .map((v) => {\n      return (\n        authInputAttributes[v]?.label ?? authInputAttributes['username'].label\n      );\n    })\n    .join(' or ');\n\n  if (loginMechanisms.length === 1) {\n    type = authInputAttributes[loginMechanisms[0]]?.type ?? 'text';\n  }\n\n  return { label, type, error };\n};\n\n/**\n * Given xstate context from AuthMachine, returns the primaryAlias and\n * secondaryAliases.\n */\nexport const getConfiguredAliases = (context: AuthContext) => {\n  const login_mechanisms = context.config?.login_mechanisms ?? [\n    ...userNameAliasArray,\n  ];\n  const aliases = login_mechanisms.filter((mechanism) =>\n    includes(userNameAliasArray, mechanism)\n  );\n\n  const [primaryAlias, ...secondaryAliases] = aliases;\n  return { primaryAlias, secondaryAliases };\n};\n\n/**\n * Get the state of current actor. This is useful for checking which screen\n * to render: e.g. `getActorState(state).matches('confirmSignUp.edit').\n */\nexport const getActorState = (state: AuthMachineState): AuthActorState => {\n  return state.context.actorRef?.getSnapshot();\n};\n\n/**\n * Get the context of current actor. Useful for getting any nested context\n * like remoteError.\n */\nexport const getActorContext = (state: AuthMachineState): AuthActorContext => {\n  return getActorState(state)?.context;\n};\n", "/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nexport const dict = {\n  de: {\n    'Account recovery requires verified contact information':\n      'Zur\u00FCcksetzen des Account ben\u00F6tigt einen verifizierten Account',\n    'An account with the given email already exists.':\n      'Ein Account mit dieser Email existiert bereits.',\n    'Back to Sign In': 'Zur\u00FCck zur Anmeldung',\n    'Change Password': 'Passwort \u00E4ndern',\n    Code: 'Code',\n    Confirm: 'Best\u00E4tigen',\n    'Confirm a Code': 'Code best\u00E4tigen',\n    'Confirm Sign In': 'Anmeldung best\u00E4tigen',\n    'Confirm Sign Up': 'Registrierung best\u00E4tigen',\n    'Confirmation Code': 'Best\u00E4tigungs-Code',\n    'Create a new account': 'Erstelle einen neuen Account',\n    'Create account': 'Hier registrieren',\n    'Create Account': 'Account erstellen',\n    Email: 'Email',\n    'Enter your password': 'Geben Sie Ihr Passwort ein',\n    'Enter your username': 'Geben Sie Ihren Benutzernamen ein',\n    'Forgot Password': 'Passwort vergessen',\n    'Forgot your password? ': 'Passwort vergessen? ',\n    'Have an account? ': 'Schon registriert? ',\n    'Incorrect username or password':\n      'Falscher Benutzername oder falsches Passwort',\n    'Invalid password format': 'Ung\u00FCltiges Passwort-Format',\n    'Invalid phone number format': `Ung\u00FCltiges Telefonummern-Format.\n              Benutze eine Nummer im Format: +12345678900`,\n    'Lost your code? ': 'Code verloren? ',\n    'New Password': 'Neues Passwort',\n    'No account? ': 'Kein Account? ',\n    Password: 'Passwort',\n    'Password attempts exceeded':\n      'Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht',\n    'Phone Number': 'Telefonnummer',\n    'Resend Code': 'Code erneut senden',\n    'Reset password': 'Passwort zur\u00FCcksetzen',\n    'Reset your password': 'Zur\u00FCcksetzen des Passworts',\n    'Send Code': 'Code senden',\n    'Sign in': 'Anmelden',\n    'Sign In': 'Anmelden',\n    'Sign in to your account': 'Melden Sie sich mit Ihrem Account an',\n    'Sign Out': 'Abmelden',\n    'Sign Up': 'Registrieren',\n    'Signing in': 'Signing in',\n    Skip: '\u00DCberspringen',\n    Submit: 'Abschicken',\n    'User already exists': 'Dieser Benutzer existiert bereits',\n    'User does not exist': 'Dieser Benutzer existiert nicht',\n    Username: 'Benutzername',\n    'Username cannot be empty': 'Benutzername darf nicht leer sein',\n    Verify: 'Verifizieren',\n    'Verify Contact': 'Kontakt verifizieren',\n  },\n  es: {\n    'Account recovery requires verified contact information':\n      'La recuperaci\u00F3n de la cuenta requiere informaci\u00F3n de contacto verificada',\n    'Back to Sign In': 'Iniciar sesi\u00F3n',\n    'Change Password': 'Cambia la contrase\u00F1a',\n    Code: 'C\u00F3digo',\n    Confirm: 'Confirmar',\n    'Confirm a Code': 'Confirmar un c\u00F3digo',\n    'Confirm Sign In': 'Confirmar inicio de sesi\u00F3n',\n    'Confirm Sign Up': 'Confirmar Registraci\u00F3n',\n    'Confirmation Code': 'Codigo de confirmaci\u00F3n',\n    'Create a new account': 'Crear una cuenta nueva',\n    Email: 'Email',\n    'Forgot Password': 'Se te olvid\u00F3 la contrase\u00F1a?',\n    'Incorrect username or password':\n      'Nombre de usuario o contrase\u00F1a incorrecta',\n    'Invalid password format': 'Formato de contrase\u00F1a inv\u00E1lido',\n    'Invalid phone number format':\n      'Formato de n\\xFAmero de tel\\xE9fono inv\\xE1lido.\\nUtilice el formato de n\\xFAmero de tel\\xE9fono +12345678900',\n    'Loading...': 'Cargando...',\n    'New Password': 'Nueva contrase\u00F1a',\n    Password: 'Contrase\u00F1a',\n    'Phone Number': 'N\u00FAmero de tel\u00E9fono',\n    'Resend a Code': 'Reenviar un c\u00F3digo',\n    'Resend Code': 'Mandar codigo otra vez',\n    'Send Code': 'Enviar c\u00F3digo',\n    'Sign In': 'Iniciar ses\u00EDon',\n    'Sign in to your account': 'Iniciar ses\u00EDon',\n    'Sign Out': 'Desconectar',\n    'Sign Up': 'Reg\u00EDstrase',\n    Skip: 'Omitir',\n    Submit: 'Enviar',\n    'User already exists': 'El usuario ya existe',\n    'User does not exist': 'El usuario no existe',\n    Username: 'Nombre de usuario',\n    'Username cannot be empty': 'El campo de usuario no puede estar vacido',\n    Verify: 'Verificar',\n    'Verify Contact': 'Verificar contacto',\n  },\n  fr: {\n    'Account recovery requires verified contact information':\n      'La r\u00E9cup\u00E9ration du compte n\u00E9cessite des informations de contact v\u00E9rifi\u00E9es',\n    'An account with the given email already exists.':\n      'Un utilisateur avec cette adresse email existe d\u00E9j\u00E0.',\n    'Back to Sign In': 'Retour \u00E0 la connexion',\n    Change: 'Modifier',\n    'Change Password': 'Modifier le mot de passe',\n    Code: 'Code',\n    Confirm: 'Confirmer',\n    'Confirm a Code': 'Confirmer un code',\n    'Confirm Sign In': 'Confirmer la connexion',\n    'Confirm Sign Up': \"Confirmer l'inscription\",\n    'Confirm SMS Code': 'Confirmer le code SMS',\n    'Confirm TOTP Code': 'Confirmer le code TOTP',\n    'Confirmation Code': 'Code de confirmation',\n    'Create a new account': 'Cr\u00E9er un nouveau compte',\n    'Create account': 'Cr\u00E9er un compte',\n    'Create Account': 'Cr\u00E9er un compte',\n    Email: 'Email',\n    'Enter your code': 'Saisissez cotre code de confirmation',\n    'Enter your email': 'Saisissez votre adresse email',\n    'Enter your password': 'Saisissez votre mot de passe',\n    'Enter your phone number': 'Saisissez votre num\u00E9ro de t\u00E9l\u00E9phone',\n    'Enter your username': \"Saisissez votre nom d'utilisateur\",\n    'Forgot Password': 'Mot de passe oubli\u00E9',\n    'Forgot your password? ': 'Mot de passe oubli\u00E9 ? ',\n    'Have an account? ': 'D\u00E9j\u00E0 un compte ? ',\n    Hello: 'Bonjour',\n    'Incorrect username or password': 'Identifiant ou mot de passe incorrect',\n    'Invalid password format': 'Format de mot de passe invalide',\n    'Invalid phone number format': `Format de num\u00E9ro de t\u00E9l\u00E9phone invalide. Veuillez utiliser un format +12345678900`,\n    'Loading...': 'Chargement...',\n    'Lost your code? ': 'Vous avez perdu votre code ? ',\n    'Network error': 'Erreur r\u00E9seau',\n    'New Password': 'Nouveau mot de passe',\n    'No account? ': 'Pas de compte ? ',\n    or: 'ou',\n    Password: 'Mot de passe',\n    'Phone Number': 'Num\u00E9ro de t\u00E9l\u00E9phone',\n    'Resend a Code': 'Renvoyer un code',\n    'Resend Code': 'Renvoyer le code',\n    'Reset password': 'R\u00E9initialisez votre mot de passe',\n    'Reset your password': 'R\u00E9initialisez votre mot de passe',\n    Send: 'Envoyer',\n    'Send Code': \"M'envoyer un code\",\n    'Sign in': 'Se connecter',\n    'Sign In': 'Se connecter',\n    'Sign in to your account': 'Connexion \u00E0 votre compte',\n    'Sign In with Amazon': 'Se connecter avec Amazon',\n    'Sign In with AWS': 'Se connecter avec AWS',\n    'Sign In with Facebook': 'Se connecter avec Facebook',\n    'Sign In with Google': 'Se connecter avec Google',\n    'Sign Out': 'D\u00E9connexion',\n    'Sign Up': \"S'inscrire\",\n    Skip: 'Passer',\n    SMS: 'SMS',\n    Submit: 'Soumettre',\n    'User already exists': \"L'utilisateur existe d\u00E9j\u00E0\",\n    'User does not exist': \"L'utilisateur n'existe pas\",\n    Username: \"Nom d'utilisateur\",\n    'Username cannot be empty': \"Le nom d'utilisateur doit \u00EAtre renseign\u00E9\",\n    'Username/client id combination not found.': \"L'utilisateur n'existe pas\",\n    Verify: 'V\u00E9rifier',\n    'Verify Contact': 'V\u00E9rifier le contact',\n  },\n  it: {\n    'Account recovery requires verified contact information':\n      'Ripristino del conto richiede un account verificati',\n    'An account with the given email already exists.':\n      'Un account con questa email esiste gi\u00E0.',\n    'Back to Sign In': 'Torna alla Accesso',\n    'Change Password': 'Cambia la password',\n    Code: 'Codice',\n    Confirm: 'Conferma',\n    'Confirm a Code': 'Codice Conferma',\n    'Confirm Sign In': 'Conferma di applicazione',\n    'Confirm Sign Up': 'Registrazione Conferma',\n    'Confirmation Code': 'Codice di verifica',\n    'Create a new account': 'Creare un nuovo account',\n    'Create account': 'Registrati',\n    'Create Account': 'Crea account',\n    Email: 'E-mail',\n    'Enter your password': 'Inserire la password',\n    'Enter your username': 'Inserisci il tuo nome utente',\n    'Forgot Password': 'Password dimenticata',\n    'Forgot your password? ': 'Password dimenticata?',\n    'Have an account? ': 'Gi\u00E0 registrato?',\n    'Incorrect username or password': 'Nome utente o password errati',\n    'Invalid password format': 'Formato della password non valido',\n    'Invalid phone number format':\n      'Utilizzo non valido Telefonummern formattare un numero nel formato :. 12.345.678,9 mille',\n    'Lost your code?': 'Perso codice?',\n    'New Password': 'Nuova password',\n    'No account? ': 'Nessun account?',\n    Password: 'Password',\n    'Password attempts exceeded':\n      'Il numero massimo di tentativi di accesso falliti \u00E8 stato raggiunto',\n    'Phone Number': 'Numero di telefono',\n    'Resend Code': 'Codice Rispedisci',\n    'Reset password': 'Ripristina password',\n    'Reset your password': 'Resetta password',\n    'Send Code': 'Invia codice',\n    'Sign in': 'Accesso',\n    'Sign In': 'Accesso',\n    'Sign in to your account': 'Accedi con il tuo account a',\n    'Sign Out': 'Esci',\n    'Sign Up': 'Iscriviti',\n    Skip: 'Salta',\n    Submit: 'Sottoscrivi',\n    'User already exists': 'Questo utente esiste gi\u00E0',\n    'User does not exist': 'Questo utente non esiste',\n    Username: 'Nome utente',\n    'Username cannot be empty': 'Nome utente non pu\u00F2 essere vuoto',\n    Verify: 'Verifica',\n    'Verify Contact': 'Contatto verifica',\n  },\n  ja: {\n    'Account recovery requires verified contact information':\n      '\u30A2\u30AB\u30A6\u30F3\u30C8\u306E\u5FA9\u65E7\u306B\u306F\u78BA\u8A8D\u6E08\u307F\u306E\u9023\u7D61\u5148\u304C\u5FC5\u8981\u3067\u3059',\n    'An account with the given email already exists.':\n      '\u5165\u529B\u3055\u308C\u305F\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u306E\u30A2\u30AB\u30A6\u30F3\u30C8\u304C\u65E2\u306B\u5B58\u5728\u3057\u307E\u3059',\n    'Back to Sign In': '\u30B5\u30A4\u30F3\u30A4\u30F3\u306B\u623B\u308B',\n    'Change Password': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u5909\u3048\u308B ',\n    Code: '\u30B3\u30FC\u30C9',\n    Confirm: '\u78BA\u5B9A',\n    'Confirm a Code': '\u30B3\u30FC\u30C9\u3092\u78BA\u8A8D',\n    'Confirm Sign In': '\u30B5\u30A4\u30F3\u30A4\u30F3\u3059\u308B',\n    'Confirm Sign Up': '\u767B\u9332\u3059\u308B',\n    'Confirmation Code': '\u78BA\u8A8D\u30B3\u30FC\u30C9',\n    'Create a new account': '\u65B0\u3057\u3044\u30A2\u30AB\u30A6\u30F3\u30C8\u3092\u4F5C\u308B',\n    'Create account': '\u30A2\u30AB\u30A6\u30F3\u30C8\u3092\u4F5C\u308B ',\n    'Create Account': '\u30A2\u30AB\u30A6\u30F3\u30C8\u3092\u4F5C\u308B',\n    Email: '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9',\n    'Enter your password': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u5165\u529B ',\n    'Enter your username': '\u30E6\u30FC\u30B6\u30FC\u540D\u3092\u5165\u529B ',\n    'Forgot Password': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u5FD8\u308C\u305F ',\n    'Forgot your password? ': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u5FD8\u308C\u307E\u3057\u305F\u304B\uFF1F ',\n    'Have an account? ': '\u30A2\u30AB\u30A6\u30F3\u30C8\u3092\u6301\u3063\u3066\u3044\u307E\u3059\u304B\uFF1F',\n    'Incorrect username or password': '\u30E6\u30FC\u30B6\u30FC\u540D\u304B\u30D1\u30B9\u30EF\u30FC\u30C9\u304C\u7570\u306A\u308A\u307E\u3059 ',\n    'Invalid password format': '\u30D1\u30B9\u30EF\u30FC\u30C9\u306E\u5F62\u5F0F\u304C\u7121\u52B9\u3067\u3059 ',\n    'Invalid phone number format':\n      '\u4E0D\u6B63\u306A\u96FB\u8A71\u756A\u53F7\u306E\u5F62\u5F0F\u3067\u3059\u3002\\n+12345678900 \u306E\u5F62\u5F0F\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044',\n    'Lost your code? ': '\u30B3\u30FC\u30C9\u3092\u5931\u304F\u3057\u307E\u3057\u305F\u304B\uFF1F',\n    'New Password': '\u65B0\u3057\u3044\u30D1\u30B9\u30EF\u30FC\u30C9',\n    'No account? ': '\u30A2\u30AB\u30A6\u30F3\u30C8\u304C\u7121\u3044\u3068\u304D ',\n    Password: '\u30D1\u30B9\u30EF\u30FC\u30C9 ',\n    'Password attempts exceeded': '\u30B5\u30A4\u30F3\u30A4\u30F3\u306E\u8A66\u884C\u56DE\u6570\u304C\u4E0A\u9650\u306B\u9054\u3057\u307E\u3057\u305F',\n    'Phone Number': '\u96FB\u8A71\u756A\u53F7',\n    'Resend Code': '\u30B3\u30FC\u30C9\u3092\u518D\u9001\u4FE1',\n    'Reset password': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u30EA\u30BB\u30C3\u30C8 ',\n    'Reset your password': '\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u30EA\u30BB\u30C3\u30C8\u3059\u308B',\n    'Send Code': '\u30B3\u30FC\u30C9\u3092\u9001\u4FE1',\n    'Sign in': '\u30B5\u30A4\u30F3\u30A4\u30F3',\n    'Sign In': '\u30B5\u30A4\u30F3\u30A4\u30F3 ',\n    'Sign in to your account': '\u30A2\u30AB\u30A6\u30F3\u30C8\u306B\u30B5\u30A4\u30F3\u30A4\u30F3 ',\n    'Sign In with Amazon': 'Amazon\u3067\u30B5\u30A4\u30F3\u30A4\u30F3',\n    'Sign In with Facebook': 'Facebook\u3067\u30B5\u30A4\u30F3\u30A4\u30F3',\n    'Sign In with Google': 'Google\u3067\u30B5\u30A4\u30F3\u30A4\u30F3',\n    'Sign Out': '\u30B5\u30A4\u30F3\u30A2\u30A6\u30C8 ',\n    'Sign Up': '\u767B\u9332 ',\n    Skip: '\u30B9\u30AD\u30C3\u30D7',\n    Submit: '\u9001\u4FE1',\n    'User already exists': '\u65E2\u306B\u30E6\u30FC\u30B6\u30FC\u304C\u5B58\u5728\u3057\u3066\u3044\u307E\u3059 ',\n    'User does not exist': '\u30E6\u30FC\u30B6\u30FC\u304C\u5B58\u5728\u3057\u307E\u305B\u3093 ',\n    Username: '\u30E6\u30FC\u30B6\u30FC\u540D ',\n    'Username cannot be empty': '\u30E6\u30FC\u30B6\u30FC\u540D\u306F\u5165\u529B\u5FC5\u9808\u3067\u3059',\n    Verify: '\u78BA\u8A8D',\n    'Verify Contact': '\u9023\u7D61\u5148\u3092\u78BA\u8A8D',\n  },\n  zh: {\n    'Account recovery requires verified contact information':\n      '\u8D26\u6237\u6062\u590D\u9700\u8981\u9A8C\u8BC1\u8FC7\u7684\u8054\u7CFB\u65B9\u5F0F',\n    'Back to Sign In': '\u56DE\u5230\u767B\u5F55',\n    'Change Password': '\u6539\u53D8\u5BC6\u7801',\n    Code: '\u786E\u8BA4\u7801',\n    Confirm: '\u786E\u8BA4',\n    'Confirm a Code': '\u786E\u8BA4\u7801',\n    'Confirm Sign In': '\u786E\u8BA4\u767B\u5F55',\n    'Confirm Sign Up': '\u786E\u8BA4\u6CE8\u518C',\n    Email: '\u90AE\u7BB1',\n    'Forgot Password': '\u5FD8\u8BB0\u5BC6\u7801',\n    'Incorrect username or password': '\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF',\n    'Invalid password format': '\u5BC6\u7801\u683C\u5F0F\u9519\u8BEF',\n    'Invalid phone number format': '\u7535\u8BDD\u683C\u5F0F\u9519\u8BEF\uFF0C\u8BF7\u4F7F\u7528\u683C\u5F0F +12345678900',\n    'New Password': '\u65B0\u5BC6\u7801',\n    Password: '\u5BC6\u7801',\n    'Phone Number': '\u7535\u8BDD',\n    'Resend a Code': '\u91CD\u53D1\u786E\u8BA4\u7801',\n    'Send Code': '\u53D1\u9001\u786E\u8BA4\u7801',\n    'Sign In': '\u767B\u5F55',\n    'Sign Out': '\u9000\u51FA',\n    'Sign Up': '\u6CE8\u518C',\n    Skip: '\u8DF3\u8FC7',\n    Submit: '\u63D0\u4EA4',\n    'User already exists': '\u7528\u6237\u5DF2\u7ECF\u5B58\u5728',\n    'User does not exist': '\u7528\u6237\u4E0D\u5B58\u5728',\n    Username: '\u7528\u6237\u540D',\n    Verify: '\u9A8C\u8BC1',\n    'Verify Contact': '\u9A8C\u8BC1\u8054\u7CFB\u65B9\u5F0F',\n  },\n};\n"],
  "mappings": "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",
  "names": []
}
