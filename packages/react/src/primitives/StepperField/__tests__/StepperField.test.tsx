import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import * as React from 'react';

import { StepperField, DECREASE_ICON, INCREASE_ICON } from '../StepperField';
import {
  testFlexProps,
  expectFlexContainerStyleProps,
} from '../../Flex/__tests__/Flex.test';
import { ComponentClassNames } from '../../shared/constants';
import { SharedText } from '../../shared/i18n';
import { AUTO_GENERATED_ID_PREFIX } from '../../utils/useStableId';
describe('StepperField: ', () => {
  describe('Flex wrapper', () => {
    it('should render default and custom classname', async () => {
      const classname = 'test-class';
      render(
        <StepperField
          label="stepper"
          testId="stepper-field"
          className={classname}
        />
      );

      const stepperField = await screen.findByTestId('stepper-field');
      expect(stepperField).toHaveClass(
        ComponentClassNames.Field,
        ComponentClassNames.StepperField,
        classname
      );
    });

    it('should set size attribute', async () => {
      render(
        <StepperField label="stepper" testId="stepper-field" size="small" />
      );
      const stepperField = await screen.findByTestId('stepper-field');
      expect(stepperField).toHaveAttribute('data-size', 'small');
    });

    it('should render all flex style props', async () => {
      render(
        <StepperField
          testId="stepper-field"
          label="stepper"
          {...testFlexProps}
        />
      );
      const stepperField = await screen.findByTestId('stepper-field');
      expectFlexContainerStyleProps(stepperField);
    });
  });

  describe('Label', () => {
    it('should render expected field classname', async () => {
      render(<StepperField label="stepper" />);

      const label = (await screen.findByText('stepper')) as HTMLLabelElement;
      expect(label).toHaveClass(ComponentClassNames.Label);
    });

    it('should have `sr-only` class when labelHidden is true', async () => {
      render(<StepperField label="stepper" labelHidden={true} />);

      const label = await screen.findByText('stepper');
      expect(label).toHaveClass('sr-only');
    });
  });

  describe('Input field', () => {
    const label = 'stepper';

    const ControlledStepper = () => {
      const [value, setValue] = React.useState(0);
      return (
        <StepperField
          label={label}
          min={-10}
          max={10}
          step={2}
          value={value}
          onStepChange={(value) => setValue(value)}
        />
      );
    };

    it('should render classname', async () => {
      render(<StepperField label={label} />);
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveClass(ComponentClassNames.StepperFieldInput);
    });

    it('should forward ref to DOM element', async () => {
      const ref = React.createRef<HTMLInputElement>();
      render(<StepperField label={label} ref={ref} />);

      await screen.findByLabelText(label);
      expect(ref.current.nodeName).toBe('INPUT');
    });

    it('should render labeled input when id is provided', async () => {
      render(<StepperField label={label} id="stepper-field" />);
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput.id).toBe('stepper-field');
    });

    it('should render labeled input when id is not provided, and is autogenerated', async () => {
      render(<StepperField label={label} />);
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput.id.startsWith(AUTO_GENERATED_ID_PREFIX)).toBeTruthy();
    });

    it('should set value correctly(controlled)', async () => {
      render(<ControlledStepper />);
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveValue(0);
      const buttons = await screen.findAllByRole('button');
      userEvent.click(buttons[0]);
      expect(stepperInput).toHaveValue(-2);
      userEvent.click(buttons[1]);
      expect(stepperInput).toHaveValue(0);
      userEvent.type(stepperInput, '9');
      fireEvent.blur(stepperInput);
      // will be rounded up to 10 when losing focus since the step is 2
      expect(stepperInput).toHaveValue(10);
    });

    it('should set value correctly(uncontrolled)', async () => {
      render(
        <StepperField
          label={label}
          defaultValue={0}
          min={-10}
          max={10}
          step={2}
        />
      );
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveValue(0);
      const buttons = await screen.findAllByRole('button');
      userEvent.click(buttons[0]);
      expect(stepperInput).toHaveValue(-2);
      userEvent.click(buttons[1]);
      expect(stepperInput).toHaveValue(0);
      userEvent.type(stepperInput, '9');
      fireEvent.blur(stepperInput);
      // will be rounded up to 10 when losing focus since the step is 2
      expect(stepperInput).toHaveValue(10);
    });

    it('should render min, max, step attributes', async () => {
      render(<StepperField label={label} min={0} max={10} step={2} />);

      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveAttribute('min', '0');
      expect(stepperInput).toHaveAttribute('max', '10');
      expect(stepperInput).toHaveAttribute('step', '2');
    });

    it('should render the state attributes', async () => {
      render(<StepperField label={label} isDisabled isReadOnly isRequired />);

      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveAttribute('disabled');
      expect(stepperInput).toHaveAttribute('readonly');
      expect(stepperInput).toHaveAttribute('required');
    });

    it('should set size attribute', async () => {
      render(<StepperField label={label} size="small" />);

      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveAttribute('data-size', 'small');
    });

    it('show render aria-invalid attribute to input when hasError', async () => {
      render(
        <StepperField label={label} errorMessage="Error message" hasError />
      );
      const stepperInput = await screen.findByLabelText(label);
      expect(stepperInput).toHaveAttribute('aria-invalid', 'true');
    });

    it('should fire event handlers', async () => {
      const onBlur = jest.fn();
      const onChange = jest.fn();
      const onWheel = jest.fn();
      render(
        <StepperField
          label={label}
          onBlur={onBlur}
          onChange={onChange}
          onWheel={onWheel}
        />
      );
      const stepperInput = await screen.findByLabelText(label);
      userEvent.type(stepperInput, '100');
      fireEvent.blur(stepperInput);
      fireEvent.wheel(stepperInput);
      expect(onChange).toHaveBeenCalled();
      expect(onBlur).toHaveBeenCalled();
      expect(onWheel).toHaveBeenCalled();
    });
  });

  describe('Increase/Decrease button', () => {
    it('should pass through size attribute', async () => {
      render(<StepperField label="stepper" size="small" />);
      const buttons = await screen.findAllByRole('button');
      expect(buttons[0]).toHaveAttribute('data-size', 'small');
      expect(buttons[1]).toHaveAttribute('data-size', 'small');
    });

    it('should render aria attributes', async () => {
      const id = 'stepper-field';
      render(
        <StepperField
          label="stepper"
          id={id}
          defaultValue={0}
          min={0}
          max={10}
          step={2}
        />
      );
      const buttons = await screen.findAllByRole('button');
      expect(buttons[0]).toHaveAttribute(
        'aria-label',
        `${SharedText.StepperField.ariaLabel.DecreaseTo} -2`
      );
      expect(buttons[1]).toHaveAttribute(
        'aria-label',
        `${SharedText.StepperField.ariaLabel.IncreaseTo} 2`
      );
      expect(buttons[0]).toHaveAttribute('aria-controls', id);
      expect(buttons[1]).toHaveAttribute('aria-controls', id);
    });

    describe('Increase/Decrease icon', () => {
      it('should pass through size attribute', async () => {
        render(<StepperField label="stepper" size="small" />);

        const decreaseIcon = await screen.findByTestId(DECREASE_ICON);
        const increaseIcon = await screen.findByTestId(INCREASE_ICON);

        // expect(decreaseIcon).toHaveAttribute('data-size', 'small');
        // expect(increaseIcon).toHaveAttribute('data-size', 'small');
      });
    });
  });

  describe('Error messages', () => {
    const errorMessage = 'This is an error message';
    it('should not show when hasError is false', async () => {
      render(<StepperField label="stepper" errorMessage={errorMessage} />);

      const errorText = await screen.queryByText(errorMessage);
      expect(errorText).not.toBeInTheDocument();
    });

    it('show when hasError and errorMessage', async () => {
      render(
        <StepperField label="stepper" errorMessage={errorMessage} hasError />
      );
      const errorText = await screen.queryByText(errorMessage);
      expect(errorText.innerHTML).toContain(errorMessage);
    });
  });

  describe('descriptive message', () => {
    it('should render descriptiveText if it is provided', async () => {
      render(<StepperField label="stepper" descriptiveText="Description" />);

      const descriptiveText = await screen.queryByText('Description');
      expect(descriptiveText.innerHTML).toContain('Description');
    });
  });
});
